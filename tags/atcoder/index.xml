<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AtCoder on shaosy&#39;s blog</title>
    <link>https://siyangshao.github.io/tags/atcoder/</link>
    <description>Recent content in AtCoder on shaosy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Apr 2021 16:13:36 +0800</lastBuildDate><atom:link href="https://siyangshao.github.io/tags/atcoder/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AtCoder ARC 116</title>
      <link>https://siyangshao.github.io/posts/atcoder-arc-116/</link>
      <pubDate>Sun, 18 Apr 2021 16:13:36 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/atcoder-arc-116/</guid>
      <description>A- Odd vs Even 题意 给出一个数字N，问N的因数中奇数和偶数哪个多
算法 被4整除：偶数多
被2整除：一样
奇数：奇数多
代码 #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; int t; long long n; int main() { cin &amp;gt;&amp;gt; t; while (t--) { cin &amp;gt;&amp;gt; n; if (n % 2 == 0) { if (n % 4 == 0) { cout &amp;lt;&amp;lt; &amp;#34;Even\n&amp;#34;; } else { cout &amp;lt;&amp;lt; &amp;#34;Same\n&amp;#34;; } } else { cout &amp;lt;&amp;lt; &amp;#34;Odd\n&amp;#34;; } } } B- Products of Min-Max 题意 给出一个序列，求其所有非空子序列中最大值与最小值积的和</description>
      <content>&lt;h3 id=&#34;a--odd-vs-evenhttpsatcoderjpcontestsarc116tasksarc116_a&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc116/tasks/arc116_a&#34;&gt;A- Odd vs Even&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;题意&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;给出一个数字N，问N的因数中奇数和偶数哪个多&lt;/p&gt;
&lt;h4 id=&#34;算法&#34;&gt;算法&lt;/h4&gt;
&lt;p&gt;被4整除：偶数多&lt;/p&gt;
&lt;p&gt;被2整除：一样&lt;/p&gt;
&lt;p&gt;奇数：奇数多&lt;/p&gt;
&lt;h4 id=&#34;代码&#34;&gt;代码&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t;
&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; n;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; t;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (t&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
		cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
				cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Even&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Same&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
			}
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Odd&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b--products-of-min-maxhttpsatcoderjpcontestsarc116tasksarc116_b&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc116/tasks/arc116_b&#34;&gt;B- Products of Min-Max&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;题意-1&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;给出一个序列，求其所有非空子序列中最大值与最小值积的和&lt;/p&gt;
&lt;h4 id=&#34;算法-1&#34;&gt;算法&lt;/h4&gt;
&lt;p&gt;将其从小到大排序&lt;/p&gt;
&lt;p&gt;则对$A_iA_j$，其总共出现了$w^{j-i-1}$次&lt;/p&gt;
&lt;p&gt;于是可得：
$$
Sum = \sum_{i=1}^N{\sum_{j=i+1}^N{A_i\cdot A_j\cdot 2^{j-i-1}}}+\sum_{i=1}^{N}{A_i^2}
$$
对于$\sum_{j=i+1}^N{ A_j\cdot 2^{j-i-1}}$，有：
$$
\sum_{j=(i-1)+1}^{N}{A_j}\cdot 2^{j-(i-1)+1}
$$
即：
$$
\sum_{j=i+1}^{N}{A_j}\cdot 2^{j-i+1}=2\cdot\sum_{j=(i-1)+1}^{N}{A_j}\cdot 2^{j-(i-1)+1}+A_i
$$
于是由上而下预处理有&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;f[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而后从下至上累加即可。&lt;/p&gt;
&lt;h4 id=&#34;代码-1&#34;&gt;代码&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N;
&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;200010&lt;/span&gt;], f[&lt;span style=&#34;color:#ae81ff&#34;&gt;200010&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mod &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;998244353&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];
	}
	sort(a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; N);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
		f[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
		f[i] &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; mod;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; a[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[i];
		sum &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; mod;
		sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; a[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a[i];
		sum &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; mod;
	}
	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; sum;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
  </channel>
</rss>
