<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shaosy&#39;s blog</title>
    <link>https://siyangshao.github.io/</link>
    <description>Recent content on shaosy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Jul 2021 15:29:49 +0800</lastBuildDate><atom:link href="https://siyangshao.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>大学物理实验_气垫导轨</title>
      <link>https://siyangshao.github.io/posts/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C_%E6%B0%94%E5%9E%AB%E5%AF%BC%E8%BD%A8/</link>
      <pubDate>Sun, 11 Jul 2021 16:09:52 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C_%E6%B0%94%E5%9E%AB%E5%AF%BC%E8%BD%A8/</guid>
      <description>气垫导轨法测重力加速度 下周一做这个实验，然而老师要求当场出结果www
yysy 有点阴间
以上海大学2020届这个大学物理实验数据为主
输入格式（样例）
data.yaml
#以下写入表格7.1数据，格式形如[t1,t2,t2&amp;#39;,t1&amp;#39;] t11: [ 28.65,29.07,29.60,30.12 ] t12: [ 21.46,21.87,22.14,22.52 ] t13: [ 20.65,21.05,21.35,21.62 ] #以下写入表格7.2数据，格式形如[t1,t2,t2&amp;#39;,t1&amp;#39;] t21: [ 32.81,21.37,21.90,38.16 ] t22: [ 32.34,21.26,21.70,37.17 ] t23: [ 32.17,21.13,21.53,36.76 ] t24: [ 32.52,21.16,21.56,36.51 ] t25: [ 32.52,21.23,21.61,37.71 ] t26: [ 32.15,20.96,21.37,36.15 ] #以下为表格7.3数据，不需要改动！！！！！！ #算了 这段不调用23333 放着罢 t31: [ 1,86,60,1 ] t32: [ 0.002,0.05,0.05,0.002 ] 输出格式（样例）
answer.yaml
table1 answer --- t1-t2(%) --- - 1.47 - 1.91 - 1.94 --- dt1-dt2(%) --- - 1.</description>
      <content>&lt;h2 id=&#34;气垫导轨法测重力加速度&#34;&gt;气垫导轨法测重力加速度&lt;/h2&gt;
&lt;p&gt;下周一做这个实验，然而老师要求当场出结果www&lt;/p&gt;
&lt;p&gt;yysy 有点阴间&lt;/p&gt;
&lt;p&gt;以上海大学2020届这个大学物理实验数据为主&lt;/p&gt;
&lt;p&gt;输入格式（样例）&lt;/p&gt;
&lt;p&gt;data.yaml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#以下写入表格7.1数据，格式形如[t1,t2,t2&amp;#39;,t1&amp;#39;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;t11&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;28.65&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;29.07&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;29.60&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;30.12&lt;/span&gt; ]
&lt;span style=&#34;color:#66d9ef&#34;&gt;t12&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;21.46&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21.87&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;22.14&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;22.52&lt;/span&gt; ]
&lt;span style=&#34;color:#66d9ef&#34;&gt;t13&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;20.65&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21.05&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21.35&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21.62&lt;/span&gt; ]
&lt;span style=&#34;color:#75715e&#34;&gt;#以下写入表格7.2数据，格式形如[t1,t2,t2&amp;#39;,t1&amp;#39;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;t21&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;32.81&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21.37&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21.90&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;38.16&lt;/span&gt; ]
&lt;span style=&#34;color:#66d9ef&#34;&gt;t22&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;32.34&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21.26&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21.70&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;37.17&lt;/span&gt; ]
&lt;span style=&#34;color:#66d9ef&#34;&gt;t23&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;32.17&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21.13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21.53&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;36.76&lt;/span&gt; ]
&lt;span style=&#34;color:#66d9ef&#34;&gt;t24&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;32.52&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21.16&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21.56&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;36.51&lt;/span&gt; ]
&lt;span style=&#34;color:#66d9ef&#34;&gt;t25&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;32.52&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21.23&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21.61&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;37.71&lt;/span&gt; ]
&lt;span style=&#34;color:#66d9ef&#34;&gt;t26&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;32.15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20.96&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21.37&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;36.15&lt;/span&gt; ]
&lt;span style=&#34;color:#75715e&#34;&gt;#以下为表格7.3数据，不需要改动！！！！！！&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#算了 这段不调用23333 放着罢&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;t31&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ]
&lt;span style=&#34;color:#66d9ef&#34;&gt;t32&lt;/span&gt;: [ &lt;span style=&#34;color:#ae81ff&#34;&gt;0.002&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.002&lt;/span&gt; ]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出格式（样例）&lt;/p&gt;
&lt;p&gt;answer.yaml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;table1 answer
--- t1-t2(%)
---
- &lt;span style=&#34;color:#ae81ff&#34;&gt;1.47&lt;/span&gt;
- &lt;span style=&#34;color:#ae81ff&#34;&gt;1.91&lt;/span&gt;
- &lt;span style=&#34;color:#ae81ff&#34;&gt;1.94&lt;/span&gt;
--- dt1-dt2(%)
---
- &lt;span style=&#34;color:#ae81ff&#34;&gt;1.73&lt;/span&gt;
- &lt;span style=&#34;color:#ae81ff&#34;&gt;1.69&lt;/span&gt;
- &lt;span style=&#34;color:#ae81ff&#34;&gt;1.25&lt;/span&gt;
table2 answer
--- dt
---
- &lt;span style=&#34;color:#ae81ff&#34;&gt;32.4183&lt;/span&gt;
- &lt;span style=&#34;color:#ae81ff&#34;&gt;21.185&lt;/span&gt;
- &lt;span style=&#34;color:#ae81ff&#34;&gt;21.6117&lt;/span&gt;
- &lt;span style=&#34;color:#ae81ff&#34;&gt;37.0767&lt;/span&gt;
--- st
---
- &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2506&lt;/span&gt;
- &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1387&lt;/span&gt;
- &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1781&lt;/span&gt;
- &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7568&lt;/span&gt;
--- ut
---
- &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2555&lt;/span&gt;
- &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1474&lt;/span&gt;
- &lt;span style=&#34;color:#ae81ff&#34;&gt;0.185&lt;/span&gt;
- &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7584&lt;/span&gt;
table &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
--- E(%)
---
- &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;
- &lt;span style=&#34;color:#ae81ff&#34;&gt;0.06&lt;/span&gt;
- &lt;span style=&#34;color:#ae81ff&#34;&gt;0.08&lt;/span&gt;
- &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;
Else
--- T
--- &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0027&lt;/span&gt;
--- g
--- &lt;span style=&#34;color:#ae81ff&#34;&gt;9.675&lt;/span&gt;
--- Eg
--- &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0221&lt;/span&gt;
--- Ug
--- &lt;span style=&#34;color:#ae81ff&#34;&gt;0.2138&lt;/span&gt;
...
Ag
--- &lt;span style=&#34;color:#ae81ff&#34;&gt;1.22&lt;/span&gt;
...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;源代码（python3.8）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;数据填写于data.yaml中，填写格式参照data.yaml中注释
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;由于yaml原因（因为作者懒且菜）
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;仅输出需要输入的数据，顺序均为按照填写顺序（即由1到n），其中d均为delta之意，后有%均代表为百分数
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;均输出于answer.yaml中
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;data.yaml中原始数据为作者舍友手测，answer.yaml中数据为作者由本程序算的结果，经检验与作者舍友手算数据无明显偏差
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;python版本为3.8
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;使用方式：填写数据完后python3(或者python?) main.py
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;或者直接采用pycharm打开本文件并点击运行
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;标准编码格式为UTF-8
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;不保证在其他环境下仍可运行
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;作者:shaosy
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;邮箱:siyang.shao@outlook.com
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;日期:2021/1/14
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; yaml
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math


&lt;span style=&#34;color:#75715e&#34;&gt;# 由于python3 round函数存在精度丢失问题，故实现四舍五入,默认均保留四位小数：&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;round_up&lt;/span&gt;(number, power&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    实现精确四舍五入，包含正、负小数多种场景
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :param number: 需要四舍五入的小数
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :param power: 四舍五入位数，支持0-∞
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :return: 返回四舍五入后的结果
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    digit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; power
    num2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(int(number &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; digit))
    &lt;span style=&#34;color:#75715e&#34;&gt;# 处理正数，power不为0的情况&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; power &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        tag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; digit &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; num2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (digit &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; tag &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (num2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; digit
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; num2 &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; digit
    &lt;span style=&#34;color:#75715e&#34;&gt;# 处理正数，power为0取整的情况&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; power &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        tag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; digit &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; int(number)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; tag &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (num2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; digit
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; num2 &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; digit
    &lt;span style=&#34;color:#75715e&#34;&gt;# 处理负数，power为0取整的情况&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; power &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        tag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; digit &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; int(number)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; tag &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (num2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; digit
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; num2 &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; digit
    &lt;span style=&#34;color:#75715e&#34;&gt;# 处理负数，power不为0的情况&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        tag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; digit &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; num2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (digit &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; tag &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (num2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; digit
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; num2 &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; digit


&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data.yaml&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; file:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; yaml&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;safe_load(file)
answer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;answer.yaml&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 表格1数据处理，根据老师要求增加两次相差百分比计算&lt;/span&gt;
t71 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t11&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t12&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t13&amp;#39;&lt;/span&gt;]]
d1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
d2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
    d1[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round_up((t71[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; t71[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; t71[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    d2[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round_up((t71[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; t71[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; t71[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
yaml&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;safe_dump_all([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;table1 answer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t1-t2(%)&amp;#34;&lt;/span&gt;, d1, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dt1-dt2(%)&amp;#34;&lt;/span&gt;, d2], answer)
&lt;span style=&#34;color:#75715e&#34;&gt;# 表格2数据处理&lt;/span&gt;
t72 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t21&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t22&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t23&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t24&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t25&amp;#39;&lt;/span&gt;], data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t26&amp;#39;&lt;/span&gt;]]
dt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
st &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
ut &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;):
        dt[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dt[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; t72[j][i]
    dt[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round_up(dt[i] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;):
        st[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (t72[j][i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; dt[i]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (t72[j][i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; dt[i])
    st[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st[i] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    st[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round_up(math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sqrt(st[i]), &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
    ut[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round_up(math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sqrt(st[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; st[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
yaml&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;safe_dump_all([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;table2 answer&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dt&amp;#34;&lt;/span&gt;, dt, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;st&amp;#34;&lt;/span&gt;, st, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ut&amp;#34;&lt;/span&gt;, ut], answer)
&lt;span style=&#34;color:#75715e&#34;&gt;# 表格3数据处理&lt;/span&gt;
t31 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
t32 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.002&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.002&lt;/span&gt;]
E &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;):
    E[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round_up(t32[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; t31[i], &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
yaml&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;safe_dump_all([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;table 3&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E(%)&amp;#34;&lt;/span&gt;, E], answer)
&lt;span style=&#34;color:#75715e&#34;&gt;# 第三小问&lt;/span&gt;
Tb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round_up((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (dt[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dt[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (dt[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dt[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (dt[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dt[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (dt[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dt[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])), &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (t31[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; t31[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; t31[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; t31[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; t31[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Tb &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;
Eg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; E[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; E[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; E[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; E[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; E[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; E[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; E[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; E[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;):
    Eg &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (ut[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ut[i] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pow(dt[i], &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (Tb &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Tb)
Eg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round_up(math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sqrt(Eg), &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
Ug &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round_up(g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Eg, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
yaml&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;safe_dump_all([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Else&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt;, Tb, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt;, g, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Eg&amp;#34;&lt;/span&gt;, Eg, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ug&amp;#34;&lt;/span&gt;, Ug], answer)
&lt;span style=&#34;color:#75715e&#34;&gt;# 实验结果&lt;/span&gt;
Ag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round_up(abs(g &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9.794&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9.794&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
Eg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round_up(Eg &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
yaml&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;safe_dump_all([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ag&amp;#34;&lt;/span&gt;, Ag], answer)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;www&lt;/p&gt;
&lt;p&gt;大概就是这样&lt;/p&gt;
&lt;p&gt;算是我的第一段为了摸鱼的代码？&lt;/p&gt;
&lt;p&gt;在马原上写的2333&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>About</title>
      <link>https://siyangshao.github.io/about/</link>
      <pubDate>Sat, 10 Jul 2021 15:29:49 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/about/</guid>
      <description>about me Learning EEE in NTU , Singapore
e-mail address official address: shao0054@e.ntu.edu.sg personal address: siyang.shao@outlook.com
Social networking site address Tiwtter: https://twitter.com/ShaoSiyang Github: https://github.com/SiyangShao</description>
      <content>&lt;h3 id=&#34;about-me&#34;&gt;about me&lt;/h3&gt;
&lt;p&gt;Learning &lt;strong&gt;EEE&lt;/strong&gt; in &lt;strong&gt;NTU , Singapore&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;e-mail-address&#34;&gt;e-mail address&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;official address:&lt;/strong&gt; &lt;a href=&#34;mailto:shao0054@e.ntu.edu.sg&#34;&gt;shao0054@e.ntu.edu.sg&lt;/a&gt;
&lt;strong&gt;personal address:&lt;/strong&gt; &lt;a href=&#34;mailto:siyang.shao@outlook.com&#34;&gt;siyang.shao@outlook.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;social-networking-site-address&#34;&gt;Social networking site address&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Tiwtter:&lt;/strong&gt; &lt;a href=&#34;https://twitter.com/ShaoSiyang&#34;&gt;https://twitter.com/ShaoSiyang&lt;/a&gt;
&lt;strong&gt;Github:&lt;/strong&gt;  &lt;a href=&#34;https://github.com/SiyangShao&#34;&gt;https://github.com/SiyangShao&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>202106</title>
      <link>https://siyangshao.github.io/posts/202106/</link>
      <pubDate>Sun, 27 Jun 2021 22:22:43 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/202106/</guid>
      <description>确定性，不确定性 6月的到来，意味着我在上大，甚至是留在中国的时间进入了倒计时。这次，我选择了不确定性。前些日子，有大二的学长问我要不要ICPC继续组队，久违地引起了我的波动。夕阳西下，在实验室里与一些志同道合的人一起写题目，讨论问题，似乎一切都在正轨之上。
我留在SHU的未来或许是确定的。找到合适的队友，大学四年里想方设法得到银牌乃至金牌，发现自己不能保研也无意考研，去争取一份大厂的工作，得到一份看起来还不错的薪水&amp;hellip;&amp;hellip;可是，NTU就不一定了。我并没有如我先前安慰我自己的那样喜爱EEE这个专业——至少，是远远不如对CS的喜爱的。其次，就NTU而言，尤其是EEE，是远远不如CS乃至其他一样selective的。更近一步说，新加坡至少在SDE这方面，长期发展也是不如中国的。对我而言，本科如果直接回国工作显然是不合算的，那么只能尝试将NTU作为跳板，去尝试北美Top30-50的CS Master等等&amp;hellip;.这一切对我而言，却是不确定中的确定。比起上大而言，有着更多的不确定性——我不知道我到底能不能做到，能不能得到一个还算好看的GPA，进入一个还算可以的学校。但是，就大方向而言，它与上大的路真的有区别么？我不知道。
那么对我而言，做出确定的底层动机显然只有一个了——有这么一个机会放在我面前，我想去尝试，仅此而已。或许会成功，或许会失败，但是，我希望，这次不会像我高中做出的每一个决定一样，事后后悔。
要好好学习啊。
NTU2025！</description>
      <content>&lt;h2 id=&#34;确定性不确定性&#34;&gt;确定性，不确定性&lt;/h2&gt;
&lt;p&gt;6月的到来，意味着我在上大，甚至是留在中国的时间进入了倒计时。这次，我选择了不确定性。前些日子，有大二的学长问我要不要ICPC继续组队，久违地引起了我的波动。夕阳西下，在实验室里与一些志同道合的人一起写题目，讨论问题，似乎一切都在正轨之上。&lt;br&gt;
我留在SHU的未来或许是确定的。找到合适的队友，大学四年里想方设法得到银牌乃至金牌，发现自己不能保研也无意考研，去争取一份大厂的工作，得到一份看起来还不错的薪水&amp;hellip;&amp;hellip;可是，NTU就不一定了。我并没有如我先前安慰我自己的那样喜爱EEE这个专业——至少，是远远不如对CS的喜爱的。其次，就NTU而言，尤其是EEE，是远远不如CS乃至其他一样selective的。更近一步说，新加坡至少在SDE这方面，长期发展也是不如中国的。对我而言，本科如果直接回国工作显然是不合算的，那么只能尝试将NTU作为跳板，去尝试北美Top30-50的CS Master等等&amp;hellip;.这一切对我而言，却是不确定中的确定。比起上大而言，有着更多的不确定性——我不知道我到底能不能做到，能不能得到一个还算好看的GPA，进入一个还算可以的学校。但是，就大方向而言，它与上大的路真的有区别么？我不知道。&lt;br&gt;
那么对我而言，做出确定的底层动机显然只有一个了——有这么一个机会放在我面前，我想去尝试，仅此而已。或许会成功，或许会失败，但是，我希望，这次不会像我高中做出的每一个决定一样，事后后悔。&lt;br&gt;
要好好学习啊。&lt;br&gt;
NTU2025！&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>CodeForces202104 202105部分题解</title>
      <link>https://siyangshao.github.io/posts/codeforces202104-202105%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</link>
      <pubDate>Fri, 18 Jun 2021 16:18:07 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/codeforces202104-202105%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</guid>
      <description>前言 这几个月事情很多 挑几道我觉得比较有意思的题目做一下题解
CF1517D 题意 给出一张图，每相邻（上下、左右）两个点之间有一个权值。每一个点可以向它相邻的点移动，要求移动$k$步后回到原点，求对这么一张图每一个点的移动路径权值最小和
算法 首先，显然的，当$k%2==1$时每一个点都无法回到原点，为$-1$ 那么接下来考虑$k%2==0$时情况 此时，同样显然，每个点的权值即为其向外移动$\frac{k}{2}$时最小权值的值乘$2$ 于是考虑每个点向外移动$n$次时权值最小值 考虑dp 那么令$dp[x][y][i]$表示点$(x,y)$在移动$i$次时最小权值 则有状态转移方程
dp[x][y][i] = min(dp[x][y][i], mp[x][y][0] + dp[x - 1][y][i - 1]); dp[x][y][i] = min(dp[x][y][i], mp[x][y][1] + dp[x + 1][y][i - 1]); dp[x][y][i] = min(dp[x][y][i], mp[x][y][2] + dp[x][y - 1][i - 1]); dp[x][y][i] = min(dp[x][y][i], mp[x][y][3] + dp[x][y + 1][i - 1]); 最后输出$dp[x][y][k]\cdot2$即为答案
代码 #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; int n, m, k; int dp[510][510][15]; int mp[510][510][4]; // 0为上，1为下，2为左，3为右 // i行j列 int main() { cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; k; memset(mp,0x3f,sizeof(mp)); int tmp; for (int i = 1; i &amp;lt;= n; i++) { for (int j = 1; j &amp;lt; m; j++) { cin &amp;gt;&amp;gt; tmp; mp[i][j][3] = tmp; mp[i][j + 1][2] = tmp; } } for (int i = 1; i &amp;lt; n; i++) { for (int j = 1; j &amp;lt;= m; j++) { cin &amp;gt;&amp;gt; tmp; mp[i][j][1] = tmp; mp[i + 1][j][0] = tmp; } } if (k % 2 == 1) { for (int i = 1; i &amp;lt;= n; i++) { for (int j = 1; j &amp;lt;= m; j++) { cout &amp;lt;&amp;lt; &amp;#34;-1 &amp;#34;; } cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; } } else { k /= 2; memset(dp, 0x3f, sizeof(dp)); for (int x = 1; x &amp;lt;= n; x++) { for (int y = 1; y &amp;lt;= m; y++) { dp[x][y][1] = min(mp[x][y][0], min(mp[x][y][1], min(mp[x][y][2], mp[x][y][3]))); } } for (int i = 2; i &amp;lt;= k; i++) { for (int x = 1; x &amp;lt;= n; x++) { for (int y = 1; y &amp;lt;= m; y++) { dp[x][y][i] = min(dp[x][y][i], mp[x][y][0] + dp[x - 1][y][i - 1]); dp[x][y][i] = min(dp[x][y][i], mp[x][y][1] + dp[x + 1][y][i - 1]); dp[x][y][i] = min(dp[x][y][i], mp[x][y][2] + dp[x][y - 1][i - 1]); dp[x][y][i] = min(dp[x][y][i], mp[x][y][3] + dp[x][y + 1][i - 1]); } } } for(int i = 1 ; i&amp;lt;=n ; i++){ for(int j = 1 ;j&amp;lt;= m ; j++){ cout&amp;lt;&amp;lt;dp[i][j][k]*2&amp;lt;&amp;lt;&amp;#34; &amp;#34;; } cout&amp;lt;&amp;lt;&amp;#34;\n&amp;#34;; } } } CF1534C 题意 给出一个2行n列的数列。可以调换任意一列的上下两个数字。要求同行、同列的数字不能相同。问有多少种情况。</description>
      <content>&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;这几个月事情很多 挑几道我觉得比较&lt;em&gt;有意思&lt;/em&gt;的题目做一下题解&lt;/p&gt;
&lt;h3 id=&#34;cf1517d&#34;&gt;CF1517D&lt;/h3&gt;
&lt;h4 id=&#34;题意&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;给出一张图，每相邻（上下、左右）两个点之间有一个权值。每一个点可以向它相邻的点移动，要求移动$k$步后回到原点，求对这么一张图每一个点的移动路径权值最小和&lt;/p&gt;
&lt;h4 id=&#34;算法&#34;&gt;算法&lt;/h4&gt;
&lt;p&gt;首先，显然的，当$k%2==1$时每一个点都无法回到原点，为$-1$
那么接下来考虑$k%2==0$时情况
此时，同样显然，每个点的权值即为其向外移动$\frac{k}{2}$时最小权值的值乘$2$
于是考虑每个点向外移动$n$次时权值最小值
考虑dp
那么令$dp[x][y][i]$表示点$(x,y)$在移动$i$次时最小权值
则有状态转移方程&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;dp[x][y][i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
	min(dp[x][y][i], mp[x][y][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dp[x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][y][i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
dp[x][y][i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
	min(dp[x][y][i], mp[x][y][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dp[x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][y][i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
dp[x][y][i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
	min(dp[x][y][i], mp[x][y][&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dp[x][y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
dp[x][y][i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
	min(dp[x][y][i], mp[x][y][&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dp[x][y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后输出$dp[x][y][k]\cdot2$即为答案&lt;/p&gt;
&lt;h4 id=&#34;代码&#34;&gt;代码&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, m, k;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dp[&lt;span style=&#34;color:#ae81ff&#34;&gt;510&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;510&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mp[&lt;span style=&#34;color:#ae81ff&#34;&gt;510&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;510&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
&lt;span style=&#34;color:#75715e&#34;&gt;// 0为上，1为下，2为左，3为右
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// i行j列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; k;
	memset(mp,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(mp));
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tmp;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; tmp;
			mp[i][j][&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp;
			mp[i][j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; tmp;
			mp[i][j][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp;
			mp[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (k &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
				cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-1 &amp;#34;&lt;/span&gt;;
			}
			cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
		}
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		k &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
		memset(dp, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(dp));
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; x&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m; y&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
				dp[x][y][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
					min(mp[x][y][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
						min(mp[x][y][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], min(mp[x][y][&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], mp[x][y][&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])));
			}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; k; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; x&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m; y&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
					dp[x][y][i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
						min(dp[x][y][i], mp[x][y][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dp[x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][y][i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
					dp[x][y][i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
						min(dp[x][y][i], mp[x][y][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dp[x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][y][i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
					dp[x][y][i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
						min(dp[x][y][i], mp[x][y][&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dp[x][y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
					dp[x][y][i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
						min(dp[x][y][i], mp[x][y][&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dp[x][y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
				}
			}
		}
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ;j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m ; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
                cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;dp[i][j][k]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
            }
            cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cf1534c&#34;&gt;CF1534C&lt;/h3&gt;
&lt;h4 id=&#34;题意-1&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;给出一个2行n列的数列。可以调换任意一列的上下两个数字。要求同行、同列的数字不能相同。问有多少种情况。&lt;/p&gt;
&lt;h4 id=&#34;算法-1&#34;&gt;算法&lt;/h4&gt;
&lt;p&gt;显然，当$a_i==b_i$时无解
其余情况时，对$i$而言，涉及到$a_i,b_i$的其他列与$i$列合并，视为一个环，这里可以用并查集维护。
最终的解答即为$2^{ans}$，ans为环的个数&lt;/p&gt;
&lt;h4 id=&#34;代码-1&#34;&gt;代码&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define int long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mod &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, _, ans, fa[&lt;span style=&#34;color:#ae81ff&#34;&gt;400010&lt;/span&gt;], vis[&lt;span style=&#34;color:#ae81ff&#34;&gt;400010&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;400010&lt;/span&gt;], b[&lt;span style=&#34;color:#ae81ff&#34;&gt;400010&lt;/span&gt;];
unordered_map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; mpa, mpb;
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;binpow&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
            res &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; x;
            res &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; mod;
        }
        x &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; x;
        x &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; mod;
        y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        fa[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
        vis[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; fa[x]) {
        fa[x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find(fa[x]);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fa[x];
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unionSet&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y) {
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find(x);
    y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find(y);
    fa[x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i) {
    vis[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (vis[mpb[a[i]]] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        unionSet(mpb[a[i]], i);
        dfs(mpb[a[i]]);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (vis[mpa[b[i]]] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        unionSet(mpa[b[i]], i);
        dfs(mpa[b[i]]);
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lld&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;_);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (_&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
        scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lld&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n);
        init();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
            scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lld&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a[i]);
            mpa[a[i]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
            scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lld&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b[i]);
            mpb[b[i]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
        }
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (vis[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
                dfs(i);
            }
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fa[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; i) {
                ans&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
            }
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; binpow(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, ans);
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lld&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, tmp);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cf1529d&#34;&gt;CF1529D&lt;/h3&gt;
&lt;h4 id=&#34;题意-2&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;给出一个有n个点的线段，其中的点两两连线。要求任意两个线段的和相等或一个线段包含另一个线段。问有多少种情况&lt;/p&gt;
&lt;h4 id=&#34;算法-2&#34;&gt;算法&lt;/h4&gt;
&lt;p&gt;一开始，思索，模拟，tle
后来发现每一个线段的值均与约束个数相关
由于约数个数为积性函数，数字范围为1e6
于是采用线性筛&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pre&lt;/span&gt;() {
    d[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;v[i]) v[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, p[&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;tot] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i, d[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, num[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; tot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; p[j]; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) {
            v[p[j] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p[j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
                num[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p[j]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                d[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p[j]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (d[i] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; num[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p[j]] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (num[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p[j]] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;mod;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
                num[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p[j]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                d[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p[j]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (d[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;mod;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;代码-2&#34;&gt;代码&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define int long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mod &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;998244353&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1000010&lt;/span&gt;] , d[&lt;span style=&#34;color:#ae81ff&#34;&gt;1000010&lt;/span&gt;] , num[&lt;span style=&#34;color:#ae81ff&#34;&gt;1000010&lt;/span&gt;] , tot , p[&lt;span style=&#34;color:#ae81ff&#34;&gt;1000010&lt;/span&gt;] , v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1000010&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; , ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pre&lt;/span&gt;() {
    d[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;v[i]) v[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, p[&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;tot] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i, d[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, num[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; tot &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; p[j]; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) {
            v[p[j] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p[j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
                num[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p[j]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                d[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p[j]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (d[i] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; num[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p[j]] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (num[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p[j]] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;mod;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
                num[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p[j]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                d[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p[j]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (d[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;mod;
            }
        }
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n;
    pre();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; ; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        a[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;d[i];
        a[i]&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;mod;
        ans&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;sum;
        sum&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;ans;
        ans&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;mod;
        sum&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;mod;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
        cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
    cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;ans;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>大学物理2</title>
      <link>https://siyangshao.github.io/posts/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%862/</link>
      <pubDate>Wed, 09 Jun 2021 16:09:00 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%862/</guid>
      <description>场强 半径为$R$ 电量为$q$均匀带电球体
球内 $$ E=\frac{q}{4\pi\varepsilon_0R^3}r $$ 球外 $$ E=\frac{q}{4\pi\varepsilon_0r^2} $$ 线密度为$\lambda$的无限长均匀带电直线 $$ E=\frac{\lambda}{2\pi\varepsilon_0r} $$ 面密度为$\sigma$无限大均匀带电平面 $$ E=\frac{\sigma}{2\varepsilon_0} $$
电容 $$ C=\frac{Q}{U} $$ $$ C=\frac{\varepsilon_0 \varepsilon_r S}{d} $$ $$ Q=CU $$ $$ E=\frac{q}{\varepsilon_0\varepsilon_r} $$ $$ E = \frac{U}{d} $$ $$ E = \frac{2F}{Q} $$ $$ U = \frac{Q}{C} $$ $$ U = Ed $$ $$ F = \frac{EQ}{2} $$ 若两金属板之间有多种东西，厚度为$d_1,d_2,d_3$，相对介电常数为$\varepsilon_1 , \varepsilon_2,\varepsilon_3$，则 $$ C = \frac{\varepsilon_0S}{\frac{d_1}{\varepsilon_1}+\frac{d_2}{\varepsilon_2}+\cdots} $$ 圆柱形电容器 $$ C=\frac{Q}{U} $$ $$ C=\frac{2\pi\varepsilon_0\varepsilon_r L}{\ln\frac{R_2}{R_1}} $$ 球形电容器 $$ C=\frac{Q}{U} $$ $$ C=\frac{4\pi\varepsilon_9\varepsilon_rR_1R_2}{R_2-R_1} $$ 电场能 $$ W=\frac{Q^2}{2C}=\frac{1}{2}QU=\frac{1}{2}CU^@ $$ 两板间位移电流 $$ I_d=\varepsilon_0 \varepsilon_r \frac{dE}{dt}S $$ $$ I_d=C\frac{dU}{dt} $$</description>
      <content>&lt;h2 id=&#34;场强&#34;&gt;场强&lt;/h2&gt;
&lt;p&gt;半径为$R$ 电量为$q$均匀带电球体&lt;/p&gt;
&lt;p&gt;球内
$$
E=\frac{q}{4\pi\varepsilon_0R^3}r
$$
球外
$$
E=\frac{q}{4\pi\varepsilon_0r^2}
$$
线密度为$\lambda$的无限长均匀带电直线
$$
E=\frac{\lambda}{2\pi\varepsilon_0r}
$$
面密度为$\sigma$无限大均匀带电平面
$$
E=\frac{\sigma}{2\varepsilon_0}
$$&lt;/p&gt;
&lt;h2 id=&#34;电容&#34;&gt;电容&lt;/h2&gt;
&lt;p&gt;$$
C=\frac{Q}{U}
$$
$$
C=\frac{\varepsilon_0 \varepsilon_r S}{d}
$$
$$
Q=CU
$$
$$
E=\frac{q}{\varepsilon_0\varepsilon_r}
$$
$$ E = \frac{U}{d} $$
$$ E = \frac{2F}{Q} $$
$$ U = \frac{Q}{C} $$
$$ U = Ed $$
$$ F = \frac{EQ}{2} $$
若两金属板之间有多种东西，厚度为$d_1,d_2,d_3$，相对介电常数为$\varepsilon_1 , \varepsilon_2,\varepsilon_3$，则
$$
C = \frac{\varepsilon_0S}{\frac{d_1}{\varepsilon_1}+\frac{d_2}{\varepsilon_2}+\cdots}
$$
圆柱形电容器
$$
C=\frac{Q}{U}
$$
$$
C=\frac{2\pi\varepsilon_0\varepsilon_r L}{\ln\frac{R_2}{R_1}}
$$
球形电容器
$$
C=\frac{Q}{U}
$$
$$
C=\frac{4\pi\varepsilon_9\varepsilon_rR_1R_2}{R_2-R_1}
$$
电场能
$$
W=\frac{Q^2}{2C}=\frac{1}{2}QU=\frac{1}{2}CU^@
$$
两板间位移电流
$$
I_d=\varepsilon_0 \varepsilon_r \frac{dE}{dt}S
$$
$$
I_d=C\frac{dU}{dt}
$$&lt;/p&gt;
&lt;h2 id=&#34;磁场&#34;&gt;磁场&lt;/h2&gt;
&lt;p&gt;无限长磁导线
$$
B=\frac{\mu_0I}{2\pi r}
$$
半径为R的圆形线圈
$$
B=\frac{\mu_0I}{2R}
$$
单位长度上电流为nI的无限长/环形磁螺旋管
$$
B=\mu_0 n I
$$&lt;/p&gt;
&lt;h3 id=&#34;求通电导线段射线磁感应强度&#34;&gt;求通电导线段/射线磁感应强度&lt;/h3&gt;
&lt;p&gt;若所求点在导线上/延长线上，则磁感应强度为0
若不在
$$
B=\frac{\mu_0 I}{4\pi r}(cos\theta_1 - cos\theta_2)
$$
其中 $\theta_1$为点与导线起点连线与导线夹角，$\theta_2$为点与导线终点连线与导线延长线夹角
令$\theta$为$dl$为l方向与r的夹角
$$
B=\frac{\mu_0 Idl\sin\theta}{4\pi r^2}
$$&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>微积分3</title>
      <link>https://siyangshao.github.io/posts/%E5%BE%AE%E7%A7%AF%E5%88%863/</link>
      <pubDate>Thu, 03 Jun 2021 16:11:46 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/%E5%BE%AE%E7%A7%AF%E5%88%863/</guid>
      <description>级数 判断级数条件收敛的方法 $$ \lim_{n \to \infty}a_n=0 $$ 且 $$ a_n&amp;gt;a_{n-1} $$ 有级数条件收敛
阿贝尔定理 对$x_0\not=0$，常数项级数$\sum_{n=0}^{\infty}a_nx_0^n$收敛，则对$|x|&amp;lt;|x_0|$，$\sum_{n=0}^{\infty}a_nx^n$收敛 对$x_0\not=0$，常数项级数$\sum_{n=0}^{\infty}a_nx_0^n$发散，则对$|x|&amp;gt;|x_0|$，$\sum_{n=0}^{\infty}a_nx^n$发散
常见的泰勒级数 $$ e^x = \sum_{n=0}^{\infty}\frac{x^n}{n!} $$ $$ \sin(x) = \sum_{n=0}^{\infty}{\frac{(-1)^n}{(2n+1)!}x^{2n+1}} $$ $$ \cos(x) = \sum_{n=0}^{\infty}{\frac{(-1)^n}{(2n)!}x^{2n}} $$ $$ \ln(1-x) = -\sum_{n=0}^{\infty}\frac{x^{n+1}}{n+1} $$ $$ \ln(1+x)=\sum_{n=0}^{\infty}\frac{(-1)^{n}x^{n+1}}{n+1} $$ $$ \frac{1}{1-x} = \sum_{n=0}^{\infty}x^n\quad x\in(-1,1) $$ $$ (1+x)^\alpha=1+\alpha x+\cdots +\frac{\alpha(\alpha-1)\cdots(\alpha-n+1)}{n!}+\cdots\quad x\in(-1,1) $$
傅里叶级数 $$ f(x) = \frac{a_0}{2} + \sum_{n-1}^{\infty}(a_n \cos(nx)+b_n\sin(nx)) $$ 其中 $$ a_n=\frac{1}{\pi}\int_{-\pi}^{\pi}f(x)\cos(nx)dx $$ $$ b_n=\frac{1}{\pi}\int_{-\pi}^{\pi}f(x)\sin(nx)dx $$
微分方程 对于方程$\frac{dy}{dx}=f(x,y)$，两边积分即可求解得: $$ y = F(x)+C $$</description>
      <content>&lt;h1 id=&#34;级数&#34;&gt;级数&lt;/h1&gt;
&lt;h2 id=&#34;判断级数条件收敛的方法&#34;&gt;判断级数条件收敛的方法&lt;/h2&gt;
&lt;p&gt;$$
\lim_{n \to \infty}a_n=0
$$
且
$$
a_n&amp;gt;a_{n-1}
$$
有级数条件收敛&lt;/p&gt;
&lt;h2 id=&#34;阿贝尔定理&#34;&gt;阿贝尔定理&lt;/h2&gt;
&lt;p&gt;对$x_0\not=0$，常数项级数$\sum_{n=0}^{\infty}a_nx_0^n$收敛，则对$|x|&amp;lt;|x_0|$，$\sum_{n=0}^{\infty}a_nx^n$收敛
对$x_0\not=0$，常数项级数$\sum_{n=0}^{\infty}a_nx_0^n$发散，则对$|x|&amp;gt;|x_0|$，$\sum_{n=0}^{\infty}a_nx^n$发散&lt;/p&gt;
&lt;h2 id=&#34;常见的泰勒级数&#34;&gt;常见的泰勒级数&lt;/h2&gt;
&lt;p&gt;$$
e^x = \sum_{n=0}^{\infty}\frac{x^n}{n!}
$$
$$
\sin(x) = \sum_{n=0}^{\infty}{\frac{(-1)^n}{(2n+1)!}x^{2n+1}}
$$
$$
\cos(x) = \sum_{n=0}^{\infty}{\frac{(-1)^n}{(2n)!}x^{2n}}
$$
$$
\ln(1-x) = -\sum_{n=0}^{\infty}\frac{x^{n+1}}{n+1}
$$
$$
\ln(1+x)=\sum_{n=0}^{\infty}\frac{(-1)^{n}x^{n+1}}{n+1}
$$
$$
\frac{1}{1-x} = \sum_{n=0}^{\infty}x^n\quad x\in(-1,1)
$$
$$
(1+x)^\alpha=1+\alpha x+\cdots +\frac{\alpha(\alpha-1)\cdots(\alpha-n+1)}{n!}+\cdots\quad x\in(-1,1)
$$&lt;/p&gt;
&lt;h2 id=&#34;傅里叶级数&#34;&gt;傅里叶级数&lt;/h2&gt;
&lt;p&gt;$$
f(x) = \frac{a_0}{2} + \sum_{n-1}^{\infty}(a_n \cos(nx)+b_n\sin(nx))
$$
其中
$$
a_n=\frac{1}{\pi}\int_{-\pi}^{\pi}f(x)\cos(nx)dx
$$
$$
b_n=\frac{1}{\pi}\int_{-\pi}^{\pi}f(x)\sin(nx)dx
$$&lt;/p&gt;
&lt;h1 id=&#34;微分方程&#34;&gt;微分方程&lt;/h1&gt;
&lt;p&gt;对于方程$\frac{dy}{dx}=f(x,y)$，两边积分即可求解得:
$$
y = F(x)+C
$$&lt;/p&gt;
&lt;h3 id=&#34;可分离变量的微分方程&#34;&gt;可分离变量的微分方程&lt;/h3&gt;
&lt;p&gt;考虑方程
$$
\frac{dy}{dx} = f(x)g(y);
$$
则其可以改写为
$$
\frac{dy}{g(y)} = f(x)dx
$$
对其两端积分，于是有
$$
\int\frac{dy}{g(y)} = \int f(x)dx+C
$$
其所确定的隐式函数即为其通解&lt;/p&gt;
&lt;h3 id=&#34;齐次方程&#34;&gt;齐次方程&lt;/h3&gt;
&lt;p&gt;对方程$$ \frac{dy}{dx}=f(x,y)$$
若$f(x,y)$可以表现为$\frac{y}{x}$的一元函数，即有
$$
f(x,y) = g(\frac{y}{x})
$$
可以得到方程
$$
\frac{dy}{dx} = g(\frac{y}{x})
$$
被称之为齐次方程
对此，令$u = \frac{y}{x}$，则可得：
$$
\frac{dy}{dx} = u+x\frac{du}{dx}
$$
带入，可得
$$
u + x\frac{du}{dx} = g(u)
$$
分离变量，可以得到
$$
\frac{du}{g(u)-u} = \frac{dx}{x}
$$
积分可得通解
$$
\int \frac{du}{g(u)-u}=ln|x|+C
$$
用$\frac{y}{x}$替换$u$，即可得到通解&lt;/p&gt;
&lt;h4 id=&#34;可化为齐次的微分方程&#34;&gt;可化为齐次的微分方程&lt;/h4&gt;
&lt;p&gt;对于方程
$$
\frac{dy}{dx} = \frac{a_1x+b_1y+c_1}{a_2x+b_2y+c_2}
$$
当$c_1=c_2=0$时为齐次方程
当其为非齐次时
为消元，令$x=X+h,y=Y+k$
于是有$dx=dX , dy=dY$
带入原式，可得
$$
\frac{dY}{dX} = \frac{a_1X+b_1Y+a_1h+b_1k+c_1}{a_2X+b_2Y+a_2h+b_2k+c_2}
$$
如果选取$h$和$k$，使得$a_1h+b_1k+c_1=0$,$a_2h+b_2k+c_2=0$
于是得到齐次方程
$$\frac{dY}{dX}=\frac{a_1X+b_1Y}{a_2X+b_2Y}$$
接下来可用齐次方程解法，令$u=\frac{Y}{X}$求出通解&lt;/p&gt;
&lt;h3 id=&#34;一阶线性微分方程&#34;&gt;一阶线性微分方程&lt;/h3&gt;
&lt;p&gt;形如
$$
\frac{dy}{dx}+P(x)y=Q(x)
$$
的方程称为一阶线性微分方程
当$Q(x)\not=0$时，称为一阶非齐次线性微分方程
为求出一阶非齐次线性微分方程的解，先考虑一阶齐次线性微分方程的解
将其化简，得
$$
\frac{dy}{y} = -P(x)dx
$$
两端积分并化简，可以得到其通解
$$
y=Ce^{-\int P(x)dx}
$$
其中，$C$是任意常数
为求出非齐次线性微分方程的解，将$C$替换为有关$x$的函数$C(x)$
为使其满足非齐次线性微分方程
有
$$
\frac{dy}{dx} = \frac{dC(x)}{dx}e^{-\int P(x)dx}-P(x)C(x)e^{-\int P(x)dx}
$$
将其带入，得
$$
\frac{dC(x)}{dx}=Q(x)e^{\int P(x)dx}
$$
积分得
$$
C(x)=\int Q(x)e^{\int P(x)dx}dx+C
$$
于是一阶非齐次线性微分方程通解为
$$
y = e^{-\int P(x)dx}(\int{Q(x)e^{\int P(x)dx}dx}+C)
$$&lt;/p&gt;
&lt;h4 id=&#34;伯努利方程&#34;&gt;伯努利方程&lt;/h4&gt;
&lt;p&gt;伯努利方程形如
$$
\frac{dy}{dx} +P(x)y = Q(x)y^n (n\not= 0,1)
$$
对其而言，在方程两边同时除$y^n$，则
$$
y^{-n}\frac{dy}{dx}+P(x)y^{1-n} = Q(x)
$$
即有
$$
\frac{1}{1-n} \frac{d(y^{1-n})}{dx} + P(x)y^{1-n} = Q(x)
$$
将$y^{1-n}$用$z$代替，即可化作一阶非齐次线性方程求解&lt;/p&gt;
&lt;h3 id=&#34;全微分方程&#34;&gt;全微分方程&lt;/h3&gt;
&lt;p&gt;对于一阶微分方程而言，其可以写成对成形式
即
$$
P(x,y) dx + Q(x,y)dy = 0
$$
若其为&lt;strong&gt;全微分方程&lt;/strong&gt;,即其满足
$$
\frac{\partial P}{\partial y}=\frac{\partial Q}{\partial x}
$$
时，$u(x,y)$有计算公式，
$$
u(x,y) = \int_{x_0}^x P(x,y) dx + \int_{y_0}^y Q(x_0,y)dy
$$
$$
u(x,y) = C
$$
即为该微分方程的通解&lt;/p&gt;
&lt;h3 id=&#34;可降阶数的高维微分方程&#34;&gt;可降阶数的高维微分方程&lt;/h3&gt;
&lt;p&gt;以二阶方程为例
$$
\frac{d^2 y}{dx^2} = f(x,y,\frac{dx}{dy})
$$&lt;/p&gt;
&lt;h4 id=&#34;1-fracd2-y-d-x2--fx型微分方程&#34;&gt;1. $\frac{d^2 y }{d x^2} = f(x)$型微分方程&lt;/h4&gt;
&lt;p&gt;令$\frac{dy}{dx} = p$，该方程即可转化为一阶微分方程
$$
\frac{dp}{dx} = f(x)
$$
积分得
$$
p = \int f(x) dx + C_1
$$
即有
$$
\frac{dy} {dx} = \int f(x) dx + C_1
$$
再对上式积分，即可得到该方程通解
$$
y = \int(\int f(x) dx) dx + C_1 x + C_2
$$
以此类推，对n阶微分方程，积分n次可以求得通解&lt;/p&gt;
&lt;h4 id=&#34;2fracd2-yd-x2--fxfracdydx型微分方程&#34;&gt;2.$\frac{d^2 y}{d x^2} = f(x,\frac{dy}{dx})$型微分方程&lt;/h4&gt;
&lt;p&gt;同样，令$\frac{dy}{dx}= p$,方程变为
$$
\frac{dp}{dx}= f(x,p)
$$
设此方程通解为$p = \varphi(x,C_1)$
则可由方程
$$
\frac{dy}{dx} = \varphi(x,C_1)
$$
求出原方程的通解
$$
y = \int \varphi(x,C_1)dx + C_2
$$&lt;/p&gt;
&lt;h4 id=&#34;3fracd2-ydx-2--fyfracdydx型微分方程&#34;&gt;3.$\frac{d^2 y}{dx ^2} = f(y,\frac{dy}{dx})$型微分方程&lt;/h4&gt;
&lt;p&gt;同样的，令$\frac{dy}{dx}=p$，可以得到
$$
\frac{d^2 y}{dx^2} = p\frac{dp}{dy}=f(y,p)
$$
若该方程的通解为$p=\varphi(y,C_1)$，将$P$用$\frac{dy}{dx}$带入，有
$$
\frac{dy}{dx} = \varphi(y,C_1)
$$
对其分离变量并积分，可得原方程通解
$$
\int \frac{dy}{\varphi(y,C_1)} = x + C_2
$$
注意：对形如
$$
\frac{d^{n-2}y}{dx^{n-2}}=f(\frac{d^{n-2}y}{dx^{n-2}},\frac{d^{n-1}y}{dx^{n-1}})
$$
的微分方程，若令$\frac{d^{n-2}y}{dx^{n-2}}=z$，则有$\frac{d^2 z}{dx^2}=f(z,\frac{dz}{dx})$
求出$z$后积分$n-2$次，可以得到原方程通解&lt;/p&gt;
&lt;h3 id=&#34;高阶线性微分方程解的结构&#34;&gt;高阶线性微分方程解的结构&lt;/h3&gt;
&lt;p&gt;对于形如
$$
\frac{d^2 y}{dx^2} + P(x)\frac{dy}{dx}+ Q(x)y = f(x)
$$
的二阶线性微分方程，若$P(x)$和$Q(x)$都为常数，则其为&lt;strong&gt;二阶常系数线性微分方程&lt;/strong&gt;。$f(x)$称为方程的&lt;strong&gt;自由项&lt;/strong&gt;，若$f(x)=0$，则其称为&lt;strong&gt;二阶齐次线性微分方程&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;齐次线性微分方程&#34;&gt;齐次线性微分方程&lt;/h4&gt;
&lt;p&gt;对于方程
$$
\frac{d^2 y}{dx^2}+P(x) \frac{dy}{dx}+Q(x)y=0
$$
&lt;strong&gt;定理11.1&lt;/strong&gt;
若$y_1(x)$和$y_2(x)$都是该齐次线性微分方程的解，则$y=C_1y_1(x)+C_2y_2(x)$也是该方程的解
即齐次线性微分方程的解满足&lt;strong&gt;叠加性&lt;/strong&gt;
&lt;strong&gt;定理11.2&lt;/strong&gt;
设$y_1(x),y_2(x),y_3(x)&amp;hellip;y_n(x)$为定义在区间$I$上的n个函数，若存在不全为零的n个常数，使得：$$
k_1y_1(x)+k_2y_2(x)+k_3y_3(x)+&amp;hellip;k_ny_n(x)=0
$$
则称这n个函数在$I$上&lt;strong&gt;线性相关&lt;/strong&gt;，否则&lt;strong&gt;线性无关&lt;/strong&gt;
若$y_1(x)$和$y_2(x)$是齐次线性微分方程的两个线性无关的解，则该方程通解为
$$
y = C_1y_1(x)+C_2y_2(x)
$$&lt;/p&gt;
&lt;h4 id=&#34;非齐次线性微分方程&#34;&gt;非齐次线性微分方程&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;定理11.3&lt;/strong&gt;
设$y^* (x)$是二阶非齐次线性微分方程
$$
\frac{d^2 y}{dx^2}+P(x)\frac{dy}{dx}+Q(x)y=f(x)
$$
的一个特解，$Y(x)$是其对应齐次线性微分方程的特解，则
$$
y = Y(x)+y^*(x)
$$
是其通解&lt;/p&gt;
&lt;h4 id=&#34;常数变易法&#34;&gt;常数变易法&lt;/h4&gt;
&lt;p&gt;对于微分方程
$$
\frac{d^2 y}{dx^2}+P(x)\frac{dy}{dx}+Q(x)y=f(x)
$$
而言，设其对应齐次线性方程通解为
$$
y=C_1 y_1(x)+C_2 y_2(x)
$$
则其通解为
$$
y^*(x) = y_1(x)\int \frac{-y_2(x)f(x)}{W(y_1(x),y_2(x))}+y_2(x)\int\frac{y_1(x)f(x)}{W(y_1(x),y_2(x))}
$$
其中，$W(y_1(x),y_2(x))$有朗斯基行列式得出，具体值为
$$
W(y_1(x),y_2(x)) = y_1(x)\frac{dy_2(x)}{dx}-y_2(x)\frac{dy_1(x)}{dx}
$$&lt;/p&gt;
&lt;h3 id=&#34;常系数齐次线性微分方程&#34;&gt;常系数齐次线性微分方程&lt;/h3&gt;
&lt;h4 id=&#34;二阶常系数齐次线性微分方程&#34;&gt;二阶常系数齐次线性微分方程&lt;/h4&gt;
&lt;p&gt;$$
\frac{d^2 y}{dx^2}+p\frac{dy}{dx}+qy=0
$$
尝试用$e^{rx}$作为解
则可以得到特征方程
$$
r_{1,2} = \frac{-p\pm\sqrt{p^2 -4q}}{2}
$$&lt;/p&gt;
&lt;h5 id=&#34;p2--4q0&#34;&gt;$p^2 -4q&amp;gt;0$&lt;/h5&gt;
&lt;p&gt;有两个特解，该方程通解为
$$
y=C_1e^{r_1 x} +   C_2e^{r_2 x}
$$&lt;/p&gt;
&lt;h5 id=&#34;p2--4q0-1&#34;&gt;$p^2 -4q=0$&lt;/h5&gt;
&lt;p&gt;通解为
$$
y=(C_1+C_2x)e^{-\frac{p}{2}x}
$$&lt;/p&gt;
&lt;h5 id=&#34;p2--4q0-2&#34;&gt;$p^2 -4q&amp;lt;0$&lt;/h5&gt;
&lt;p&gt;得到两个共轭复根
通解为
$$
y=e^{\alpha x}[(C_1+C_2)\cos{\beta x}+i(C_1-C_2)\sin{\beta x}]
$$
即
$$
y=e^{\alpha x}(C_1\cos{\beta x}+C_2\sin{\beta x})
$$
其中，$C_1$为实数，$C_2$为虚数&lt;/p&gt;
&lt;h4 id=&#34;n阶常系数齐次线性微分方程&#34;&gt;n阶常系数齐次线性微分方程&lt;/h4&gt;
&lt;p&gt;同样地，得到其特征方程
$$
r^n+p_1 r^{n-1}+p_2 r^{n-2}+&amp;hellip;+p_{n-1} r + p_n = 0
$$
然后求解
对于第n项，解为$e^{r_n x}$&lt;/p&gt;
&lt;h3 id=&#34;欧拉方程&#34;&gt;欧拉方程&lt;/h3&gt;
&lt;p&gt;形如
$$
x^n \frac{d^ny}{dx^n}+p_1x^{n-1}\frac{d^{n-1}y}{dx^{n-1}}+\cdots +p_{n-1}x\frac{dy}{dx}+p_ny=0
$$
引入自变量代换
$$
t = \ln(x)\&lt;br&gt;
D = \frac{d}{dt}
$$
则可得
$$
x^k\frac{d^ky}{dx^k}=D(D-1)(D-2)\cdots(D-k+1)y
$$
然后可通过n阶常系数齐次线性方程方法解出t，带入即可得到x&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>202105</title>
      <link>https://siyangshao.github.io/posts/202105/</link>
      <pubDate>Sun, 16 May 2021 22:22:36 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/202105/</guid>
      <description>0508
 很多时候，支持我们未来的或许并不是可见的路，而是可能性。
如果不出意外的话，明年，从大一重新开始。
 0525
 马上又要期末考了。微积分难度比上个学期稍微简单一点，大学理则略微难一些。工程制图这门课，则可以说根本没学懂。在人人都说有手就行的日子里也是一件怪事。
期末考前的那一周周末，是蓝桥杯国赛。已经一个月没有打codeforce的我昨晚决定去练练手。运气不错，没有掉分。ntu给我的专业是eee，相比计算机更加硬件一点。我喜欢eee么？其实是说不上的。但是，我喜欢计算机么？也不一定。算法学起来很有意思，但是这与计算机的专业课——编译原理，计算机组成原理，又相差多远呢？如果说就是oop和算法、数据结构，也是eee的必修课。不过eee转cs容易这件事却也是不争的事实。
去新加坡的机票已经买好了，是7月19日出发的。说来也巧，我是7月17号成年。正好卡在这个时间点。不过，或许是由于疫情原因，student pass的邮件仍然没有发过来——当然，当大家的student pass都遥遥无期的时候，我也算不上着急了。
转眼间，我高中毕业，也已经快1年了啊。七月，八月，十二月，一月，三月，五月。这些月份里都产生了可以说是改变了我轨迹的事情。从这方面看的话，去年可以说是跌宕起伏了。但是，无论我日后发生什么，都改变不了17岁那年眼睛里失去的光芒。
想了很多，但终究还是悲哀的发现，对我而言，高考，依然是永远的噩梦了。</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;0508&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://siyangshao.github.io/images/NTU.png&#34; alt=&#34;NTU 2025er&#34;&gt;&lt;/p&gt;
&lt;p&gt;很多时候，支持我们未来的或许并不是可见的路，而是可能性。&lt;/p&gt;
&lt;p&gt;如果不出意外的话，明年，从大一重新开始。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0525&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;马上又要期末考了。微积分难度比上个学期稍微简单一点，大学理则略微难一些。工程制图这门课，则可以说根本没学懂。在人人都说有手就行的日子里也是一件怪事。&lt;/p&gt;
&lt;p&gt;期末考前的那一周周末，是蓝桥杯国赛。已经一个月没有打codeforce的我昨晚决定去练练手。运气不错，没有掉分。ntu给我的专业是eee，相比计算机更加硬件一点。我喜欢eee么？其实是说不上的。但是，我喜欢计算机么？也不一定。算法学起来很有意思，但是这与计算机的专业课——编译原理，计算机组成原理，又相差多远呢？如果说就是oop和算法、数据结构，也是eee的必修课。不过eee转cs容易这件事却也是不争的事实。&lt;/p&gt;
&lt;p&gt;去新加坡的机票已经买好了，是7月19日出发的。说来也巧，我是7月17号成年。正好卡在这个时间点。不过，或许是由于疫情原因，student pass的邮件仍然没有发过来——当然，当大家的student pass都遥遥无期的时候，我也算不上着急了。&lt;/p&gt;
&lt;p&gt;转眼间，我高中毕业，也已经快1年了啊。七月，八月，十二月，一月，三月，五月。这些月份里都产生了可以说是改变了我轨迹的事情。从这方面看的话，去年可以说是跌宕起伏了。但是，无论我日后发生什么，都改变不了17岁那年眼睛里失去的光芒。&lt;/p&gt;
&lt;p&gt;想了很多，但终究还是悲哀的发现，对我而言，高考，依然是永远的噩梦了。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>202104</title>
      <link>https://siyangshao.github.io/posts/202104/</link>
      <pubDate>Thu, 29 Apr 2021 22:22:31 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/202104/</guid>
      <description>四月眨眼间已经过去了。距离去年疫情后返校也过去了足足一年。又是一年高考季。
确实，我的四月过的还算充实。第一周的昆明区域赛，第二周的csp，第三周的蓝桥杯+校赛，都可以说刺激着我的神经。与此同时，codeforces第一次上蓝，蓝桥杯几乎擦着线拿了个省一，csp295分，昆明的不断地dirt&amp;hellip;&amp;hellip;似乎看起来一切都在向着好的地方发展，不是么？
但是，对现在生活的概括，或许只能用无聊透顶来形容了。我不知道明天的方向是什么。在集训队无所事事地晃着，刷一些水题来彰显自己所谓的“努力”，在无尽的游戏里消磨时光&amp;hellip;&amp;hellip;不想听课，不想学习&amp;hellip;&amp;hellip;
见到以前的一位初中同学拿到了昆山杜克的offer+奖学金，属实是羡慕了。他至少不用担心高考万一如何如何，不是么？
最近有条新闻很火，一男子于二号线龙阳路站跳入铁轨自杀。好像是因为地铁急刹车了等原因，走的并不算安详。龙阳路距离我家不远，然而正如同网友所说的，当听到这则消息我的第一感受并不是震惊，也不是按照某些知乎答主所谓“要的就tm是团结”所形容的对无良资本家的声讨，而是——有完没完啊。的确，这是一种看客精神，也是应当受到批判的。这种看法的由来大概是因为已经对现状麻木了。改变？改变？改变？别了吧。如今，活着已经让人尽力了，我真的已经没有多余的想法和精力去说出对世界的看法了。也是，自从高中退出模联以后，模联经历的那两年似乎耗尽了我此生对键政所有的兴趣。正如计算机一样——我甚至不在乎我学什么，为什么这么学了。
对自己失望，似乎就是一个失败者的宿命。作为一个失败者，失败的不是现状，而是对未来的期许。
五一假期 独自于学校宿舍 夜。
甚至已经无法言明现在的感受。日复一日的重复 无论是做题 还是什么
这些日子 比高三的终末还要难熬。
在每天的重复中 不可避免地向前走。
于是，不知道将要去往何方。</description>
      <content>&lt;p&gt;四月眨眼间已经过去了。距离去年疫情后返校也过去了足足一年。又是一年高考季。&lt;/p&gt;
&lt;p&gt;确实，我的四月过的还算充实。第一周的昆明区域赛，第二周的csp，第三周的蓝桥杯+校赛，都可以说刺激着我的神经。与此同时，codeforces第一次上蓝，蓝桥杯几乎擦着线拿了个省一，csp295分，昆明的不断地dirt&amp;hellip;&amp;hellip;似乎看起来一切都在向着好的地方发展，不是么？&lt;/p&gt;
&lt;p&gt;但是，对现在生活的概括，或许只能用无聊透顶来形容了。我不知道明天的方向是什么。在集训队无所事事地晃着，刷一些水题来彰显自己所谓的“努力”，在无尽的游戏里消磨时光&amp;hellip;&amp;hellip;不想听课，不想学习&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;见到以前的一位初中同学拿到了昆山杜克的offer+奖学金，属实是羡慕了。他至少不用担心高考万一如何如何，不是么？&lt;/p&gt;
&lt;p&gt;最近有条新闻很火，一男子于二号线龙阳路站跳入铁轨自杀。好像是因为地铁急刹车了等原因，走的并不算安详。龙阳路距离我家不远，然而正如同网友所说的，当听到这则消息我的第一感受并不是震惊，也不是按照某些知乎答主所谓“要的就tm是团结”所形容的对无良资本家的声讨，而是——有完没完啊。的确，这是一种看客精神，也是应当受到批判的。这种看法的由来大概是因为已经对现状麻木了。改变？改变？改变？别了吧。如今，活着已经让人尽力了，我真的已经没有多余的想法和精力去说出对世界的看法了。也是，自从高中退出模联以后，模联经历的那两年似乎耗尽了我此生对键政所有的兴趣。正如计算机一样——我甚至不在乎我学什么，为什么这么学了。&lt;/p&gt;
&lt;p&gt;对自己失望，似乎就是一个失败者的宿命。作为一个失败者，失败的不是现状，而是对未来的期许。&lt;/p&gt;
&lt;p&gt;五一假期 独自于学校宿舍 夜。&lt;/p&gt;
&lt;p&gt;甚至已经无法言明现在的感受。日复一日的重复 无论是做题 还是什么&lt;/p&gt;
&lt;p&gt;这些日子 比高三的终末还要难熬。&lt;/p&gt;
&lt;p&gt;在每天的重复中 不可避免地向前走。&lt;/p&gt;
&lt;p&gt;于是，不知道将要去往何方。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>AtCoder ARC 116</title>
      <link>https://siyangshao.github.io/posts/atcoder-arc-116/</link>
      <pubDate>Sun, 18 Apr 2021 16:13:36 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/atcoder-arc-116/</guid>
      <description>A- Odd vs Even 题意 给出一个数字N，问N的因数中奇数和偶数哪个多
算法 被4整除：偶数多
被2整除：一样
奇数：奇数多
代码 #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; int t; long long n; int main() { cin &amp;gt;&amp;gt; t; while (t--) { cin &amp;gt;&amp;gt; n; if (n % 2 == 0) { if (n % 4 == 0) { cout &amp;lt;&amp;lt; &amp;#34;Even\n&amp;#34;; } else { cout &amp;lt;&amp;lt; &amp;#34;Same\n&amp;#34;; } } else { cout &amp;lt;&amp;lt; &amp;#34;Odd\n&amp;#34;; } } } B- Products of Min-Max 题意 给出一个序列，求其所有非空子序列中最大值与最小值积的和</description>
      <content>&lt;h3 id=&#34;a--odd-vs-evenhttpsatcoderjpcontestsarc116tasksarc116_a&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc116/tasks/arc116_a&#34;&gt;A- Odd vs Even&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;题意&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;给出一个数字N，问N的因数中奇数和偶数哪个多&lt;/p&gt;
&lt;h4 id=&#34;算法&#34;&gt;算法&lt;/h4&gt;
&lt;p&gt;被4整除：偶数多&lt;/p&gt;
&lt;p&gt;被2整除：一样&lt;/p&gt;
&lt;p&gt;奇数：奇数多&lt;/p&gt;
&lt;h4 id=&#34;代码&#34;&gt;代码&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t;
&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; n;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; t;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (t&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
		cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
				cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Even&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Same&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
			}
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Odd&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;b--products-of-min-maxhttpsatcoderjpcontestsarc116tasksarc116_b&#34;&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc116/tasks/arc116_b&#34;&gt;B- Products of Min-Max&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;题意-1&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;给出一个序列，求其所有非空子序列中最大值与最小值积的和&lt;/p&gt;
&lt;h4 id=&#34;算法-1&#34;&gt;算法&lt;/h4&gt;
&lt;p&gt;将其从小到大排序&lt;/p&gt;
&lt;p&gt;则对$A_iA_j$，其总共出现了$w^{j-i-1}$次&lt;/p&gt;
&lt;p&gt;于是可得：
$$
Sum = \sum_{i=1}^N{\sum_{j=i+1}^N{A_i\cdot A_j\cdot 2^{j-i-1}}}+\sum_{i=1}^{N}{A_i^2}
$$
对于$\sum_{j=i+1}^N{ A_j\cdot 2^{j-i-1}}$，有：
$$
\sum_{j=(i-1)+1}^{N}{A_j}\cdot 2^{j-(i-1)+1}
$$
即：
$$
\sum_{j=i+1}^{N}{A_j}\cdot 2^{j-i+1}=2\cdot\sum_{j=(i-1)+1}^{N}{A_j}\cdot 2^{j-(i-1)+1}+A_i
$$
于是由上而下预处理有&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;f[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而后从下至上累加即可。&lt;/p&gt;
&lt;h4 id=&#34;代码-1&#34;&gt;代码&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N;
&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;200010&lt;/span&gt;], f[&lt;span style=&#34;color:#ae81ff&#34;&gt;200010&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mod &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;998244353&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; N;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];
	}
	sort(a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; N);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
		f[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
		f[i] &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; mod;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; a[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[i];
		sum &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; mod;
		sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; a[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a[i];
		sum &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; mod;
	}
	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; sum;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>CodeForces Round 714</title>
      <link>https://siyangshao.github.io/posts/codeforces-round-714/</link>
      <pubDate>Mon, 12 Apr 2021 16:17:33 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/codeforces-round-714/</guid>
      <description>A. Array and Peaks 题意 给出一个字符串，使其具有k个波峰
算法 略
代码 #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; int _, n, k; int main() { cin &amp;gt;&amp;gt; _; while (_--) { cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k; if (k &amp;gt; (n - 1) / 2) { cout &amp;lt;&amp;lt; &amp;#34;-1\n&amp;#34;; } else { vector&amp;lt;int&amp;gt; q; int i = 1; while (k--) { q.push_back(i); q.push_back(n + 1 - i); i++; } for (auto j : q) { cout &amp;lt;&amp;lt; j &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } for (int j = i; j &amp;lt;= n + 1 - i; j++) { cout &amp;lt;&amp;lt; j &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; } } } B .</description>
      <content>&lt;h2 id=&#34;a-array-and-peakshttpscodeforcescomproblemsetproblem1513a&#34;&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1513/A&#34;&gt;A. Array and Peaks&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意&#34;&gt;题意&lt;/h3&gt;
&lt;p&gt;给出一个字符串，使其具有k个波峰&lt;/p&gt;
&lt;h3 id=&#34;算法&#34;&gt;算法&lt;/h3&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;代码&#34;&gt;代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _, n, k;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; _;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (_&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
		cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; k;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {
			cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; q;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (k&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
				q.push_back(i);
				q.push_back(n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i);
				i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; j : q) {
				cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
				cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
			}
			cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;b--and-sequenceshttpscodeforcescomproblemsetproblem1513b&#34;&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1513/B&#34;&gt;B . AND Sequences&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意-1&#34;&gt;题意&lt;/h3&gt;
&lt;p&gt;给出一组字符串，问其有多少个排列能满足：&lt;/p&gt;
&lt;p&gt;对$\forall x \in [1,n-1]$，有
$$
a_1 &amp;amp; a_2 &amp;amp;a_3\cdots&amp;amp;a_i=a_{i+1}&amp;amp;a_{i+2}&amp;amp;\cdots&amp;amp;a_n
$$&lt;/p&gt;
&lt;h3 id=&#34;算法-1&#34;&gt;算法&lt;/h3&gt;
&lt;p&gt;考虑到位运算$&amp;amp;$的性质有$a&amp;amp;a==a$，令$a_1&amp;amp;a_2&amp;amp;\cdots&amp;amp;a_n=a$，有$a_i&amp;amp;a==a$，$a_1=a$，$a_n=a$&lt;/p&gt;
&lt;p&gt;枚举判断即可&lt;/p&gt;
&lt;h3 id=&#34;代码-1&#34;&gt;代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;#define int long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mod &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _, n, ans, an, tmp;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;200010&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; _;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (_&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
		cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
		cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
		an &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
		ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];
			an &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (an &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; a[i]);
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (an &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; a[i]) {
				ans&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((an &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; a[i]) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; an) {
				flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			}
		}
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(ans&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flag) {
			tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (ans &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
				tmp &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; i;
				tmp &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; mod;
			}
			cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
		}&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
            cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        }
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;c--add-onehttpscodeforcescomproblemsetproblem1513c&#34;&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1513/C&#34;&gt;C . Add One&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意-2&#34;&gt;题意&lt;/h3&gt;
&lt;p&gt;给出一个数字$n$，对他进行$m$次操作，每次操作为对&lt;strong&gt;其所有数位+1&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;算法-2&#34;&gt;算法&lt;/h3&gt;
&lt;p&gt;dfs记忆化搜索存储9加m次后有几位暴力即可&lt;/p&gt;
&lt;h3 id=&#34;代码-2&#34;&gt;代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define int long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mod &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
string s ;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m , _ ;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;200010&lt;/span&gt;] ;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;judge&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x , &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(y&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(f[y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x)]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
        f[y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; judge(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;x)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;judge(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;x);
        f[y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x)]&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;mod;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f[y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x)];
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    ios&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sync_with_stdio(false);
    cin.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),cout.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;_;
    judge(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;200000&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(_&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
        cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;m;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; s.length() ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; qs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;
            dp &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; judge(qs,m);
            dp&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;mod;
        }
        cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;dp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;d--gcd-and-msthttpscodeforcescomproblemsetproblem1513d&#34;&gt;&lt;a href=&#34;https://codeforces.com/problemset/problem/1513/D&#34;&gt;D . GCD and MST&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意-3&#34;&gt;题意&lt;/h3&gt;
&lt;p&gt;给出一串数字，其中相邻数字之间cost为p，而一串数字若其最小公因数是其中最小的数字，则其最左端与最右端cost为最小的数字，求最小生成树&lt;/p&gt;
&lt;h3 id=&#34;算法-3&#34;&gt;算法&lt;/h3&gt;
&lt;p&gt;从最小值开始双端枚举，将每一串数字合并为其中代价均为最小值的单个节点&lt;/p&gt;
&lt;h3 id=&#34;代码-3&#34;&gt;代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define int long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, i;
} a[&lt;span style=&#34;color:#ae81ff&#34;&gt;200010&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _, p, n, b[&lt;span style=&#34;color:#ae81ff&#34;&gt;200010&lt;/span&gt;], vis[&lt;span style=&#34;color:#ae81ff&#34;&gt;200010&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;(node x, node y) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x.n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; y.n; }
&lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	ios&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sync_with_stdio(false);
	cin.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), cout.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
	cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; _;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (_&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
		memset(vis, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(vis));
		cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; p;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; b[i];
			a[i].n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b[i];
			a[i].i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
		}
		sort(a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n, cmp);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, rest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[i].n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; p)
				&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (vis[a[i].i])
				&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[i].i, r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[i].i;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (l &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;vis[l] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (b[l &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; a[i].n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
				l&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (r &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;vis[r] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (b[r &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; a[i].n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
				r&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; r; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
				vis[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			}
			rest &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; l;
			ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (r &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; l) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a[i].n;
		}
		ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; rest &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p;
		cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>2020ICPC Kunming</title>
      <link>https://siyangshao.github.io/posts/2020icpc-kunming/</link>
      <pubDate>Fri, 02 Apr 2021 16:04:05 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/2020icpc-kunming/</guid>
      <description>热身赛 A、B 略，B我dirt了两发	太丢人了
C-Statues 题意 给出n个位置，k个节点（不重复的位置和可能重复的重量），其中将一个节点从i移动到j所消耗代价为$|i-j|\cdot w[i]$ ，求使其成为不递减序列所需要的最小代价
算法 一开始以为是贪心，后来以为是区间，都错了
考虑dp
用$dp[i][j]$存储在前$i$个格子中存储$j$个值所需要的最小代价
那么不去管每个节点原始的位置，其放入dp所需要的代价均为$|a[j].pos-i|\cdot a[j].val$
将节点首先按val，其次按pos排序
那么对前i个格子存储j个点而言，其min必然为$dp[i-1][j]$（若存在）和$dp[i-1][j-1]+cost$的最小值
即可得到状态转移方程：
if(i-1&amp;gt;=j) dp[i][j] = min(dp[i-1][j] , dp[i-1][j-1] + abs(a[j].pos - i)*a[j].val); else dp[i][j]=dp[i-1][j-1] + abs(a[j].pos - i)*a[j].val; 代码 #include &amp;lt;bits/stdc++.h&amp;gt;#define int long long using namespace std; int n , k ; struct node{ int val , pos; }a[5010]; int dp[5010][5010]; bool cmp(node x , node y){ if(x.val!=y.val){ return x.val &amp;lt; y.val; }else{ return x.</description>
      <content>&lt;h2 id=&#34;热身赛&#34;&gt;热身赛&lt;/h2&gt;
&lt;p&gt;A、B 	略，B我dirt了两发	太丢人了&lt;/p&gt;
&lt;h4 id=&#34;c-statueshttpsacnowcodercomacmcontest13977c&#34;&gt;&lt;a href=&#34;https://ac.nowcoder.com/acm/contest/13977/C&#34;&gt;C-Statues&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;题意&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;给出n个位置，k个节点（不重复的位置和可能重复的重量），其中将一个节点从i移动到j所消耗代价为$|i-j|\cdot w[i]$ ，求使其成为不递减序列所需要的最小代价&lt;/p&gt;
&lt;h4 id=&#34;算法&#34;&gt;算法&lt;/h4&gt;
&lt;p&gt;一开始以为是贪心，后来以为是区间，都错了&lt;/p&gt;
&lt;p&gt;考虑dp&lt;/p&gt;
&lt;p&gt;用$dp[i][j]$存储在前$i$个格子中存储$j$个值所需要的最小代价&lt;/p&gt;
&lt;p&gt;那么不去管每个节点原始的位置，其放入dp所需要的代价均为$|a[j].pos-i|\cdot a[j].val$&lt;/p&gt;
&lt;p&gt;将节点首先按val，其次按pos排序&lt;/p&gt;
&lt;p&gt;那么对前i个格子存储j个点而言，其min必然为$dp[i-1][j]$（若存在）和$dp[i-1][j-1]+cost$的最小值&lt;/p&gt;
&lt;p&gt;即可得到状态转移方程：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;j) dp[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j] , dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; abs(a[j].pos &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a[j].val);
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; dp[i][j]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; abs(a[j].pos &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a[j].val;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;代码&#34;&gt;代码&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define int long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n , k ;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node&lt;/span&gt;{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; val , pos;
}a[&lt;span style=&#34;color:#ae81ff&#34;&gt;5010&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dp[&lt;span style=&#34;color:#ae81ff&#34;&gt;5010&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;5010&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;(node x , node y){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(x.val&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;y.val){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x.val &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; y.val;
    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x.pos &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; y.pos;
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;k;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; k ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;a[i].pos&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;a[i].val;
    }
    sort(a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;k,cmp);
    dp[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; k ; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            &lt;span style=&#34;color:#75715e&#34;&gt;// dp前i个格子中有j个数字
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt;j)dp[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j] , dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; abs(a[j].pos &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a[j].val);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; dp[i][j]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][j&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; abs(a[j].pos &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a[j].val;
        }
    }
    cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;dp[n][k]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;正式赛&#34;&gt;正式赛&lt;/h2&gt;
&lt;p&gt;总的来说还是太dirt了，只过了三道题，以我个人的问题居多吧。队友算不上给力，几乎就是我输出的。罚时爆掉了，我在L上面dirt了太多发。&lt;/p&gt;
&lt;p&gt;打比赛还是快乐的，感觉到了自己的很多不足，也有了很多收获。初步打算暑假前换队伍了，可是学校里面找不到肯定能一起打的队友有点伤心。&lt;/p&gt;
&lt;p&gt;H略&lt;/p&gt;
&lt;h3 id=&#34;l-simone-and-graph-coloringhttpsacnowcodercomacmcontest12548l&#34;&gt;&lt;a href=&#34;https://ac.nowcoder.com/acm/contest/12548/L&#34;&gt;L-Simone and graph coloring&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;题意-1&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;给出一串数字，其中满足$i&amp;lt;j$且$a_i&amp;gt;a_j$的数字之间有连接。&lt;/p&gt;
&lt;p&gt;给这串数字涂色，有链接的数字不能用一样的颜色。&lt;/p&gt;
&lt;p&gt;问最小使用的颜色数量和涂色方案&lt;/p&gt;
&lt;h4 id=&#34;算法-1&#34;&gt;算法&lt;/h4&gt;
&lt;p&gt;瞎鼓捣搞出来最小使用的涂色方案应如下：&lt;/p&gt;
&lt;p&gt;对每个颜色，涂为该颜色的应为一个不下降子数组&lt;/p&gt;
&lt;p&gt;对每次新的$a_i$，将其排在比他小的最大的不下降子数组的末尾，若均不满足，则开新的子数组&lt;/p&gt;
&lt;p&gt;对此可以通过二分查找法减少时间复杂度&lt;/p&gt;
&lt;p&gt;所以总的时间复杂度为$nlogn$，若不进行优化则会TLE&lt;/p&gt;
&lt;h4 id=&#34;代码-1&#34;&gt;代码&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1000010&lt;/span&gt;], b[&lt;span style=&#34;color:#ae81ff&#34;&gt;1000010&lt;/span&gt;], c[&lt;span style=&#34;color:#ae81ff&#34;&gt;1000010&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; C;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; l , r , mid;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    ios&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sync_with_stdio(false);
    cin.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), cout.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; t;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (t&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
        &lt;span style=&#34;color:#75715e&#34;&gt;/***
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        memset(a, 0, sizeof(a));
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        memset(b, 0, sizeof(b));
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        memset(c, 0, sizeof(c));
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;         ***/&lt;/span&gt;
        cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
        C &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        b[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, b[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, b[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        c[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, c[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, c[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a[i];
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b[C]) {
                C&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
                b[C] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[i];
                c[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; C;
            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
                l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; , r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; C;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(l&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;r){
                    mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (l&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;r)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(b[mid]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;a[i]){
                        l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
                        r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid;
                    }
                }
                b[r] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[i];
                c[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r;
            }
        }
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; C &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
        }
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;i--mrmain-and-windmillshttpsacnowcodercomacmcontest12548i&#34;&gt;&lt;a href=&#34;https://ac.nowcoder.com/acm/contest/12548/I&#34;&gt;I- Mr.Main and Windmills&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;题意-2&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;从s点到t点的过程中，有n个风车。询问看到每个风车和其他风车之间相对位置（左侧或右侧）第k次变化时所处地点&lt;/p&gt;
&lt;h4 id=&#34;算法-2&#34;&gt;算法&lt;/h4&gt;
&lt;p&gt;由题意可知，每个风车之间的变化应当为这两个风车的连线与st线段的焦点&lt;/p&gt;
&lt;p&gt;考虑到总共有n个风车，$n&amp;lt;1000$，所以预处理并排序焦点&lt;/p&gt;
&lt;p&gt;复杂度为$n^2logn$&lt;/p&gt;
&lt;p&gt;具体怎么算就是板子了&lt;/p&gt;
&lt;h4 id=&#34;代码-2&#34;&gt;代码&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; eps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;#define zero(x) ((fabs(x) &amp;lt; eps?1:0))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define sgn(x)(fabs(x)&amp;lt;eps ? 0 :((x)&amp;lt;0?-1:1))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;point&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; x,y;
    point(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; , &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
        x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a , y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b;
    }
    point &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; point &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b) &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;point&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;b.x , y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;b.y);
    }
    point &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; point &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b) &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;point&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b.x , y&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b.y);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (point &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; b) &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;zero&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;b.x)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;zero(y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;b.y);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; point &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b) &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b.x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b.y;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; point &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b) &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b.y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b.x;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; a , &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b){
        a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x,b&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;y;
    }
};
point start , tend;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;line&lt;/span&gt;
{
    point s,e;
    line(){}
    line(point ss , point ee){
        s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ss,e&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ee;
    }
};
point h[&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;];
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;point&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;q[&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;(point a , point b){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; disa &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (a&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;start).x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;start).x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;start).y&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;start).y;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; disb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((b&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;start).x)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((b&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;start).x)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;((b&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;start).y)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((b&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;start).y);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; disa &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; disb;
}
&lt;span style=&#34;color:#75715e&#34;&gt;//l1 zhixian l2 xianduan
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;segxline&lt;/span&gt;(line l1 , line l2){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sgn((l2.s&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l1.e)&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;(l1.s&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l1.e))&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sgn((l2.e&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l1.e)&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;(l1.s&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l1.e))&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
point &lt;span style=&#34;color:#a6e22e&#34;&gt;spoint&lt;/span&gt;(line l1 , line l2){
    point res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l1.s;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((l1.s&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l2.s)&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;(l2.s&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l2.e))&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;((l1.s&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l1.e)&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;(l2.s&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l2.e));
    res.x&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;(l1.e.x&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l1.s.x)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t;
    res.y &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;(l1.e.y&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l1.s.y)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;t;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n,m;
    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;m;
    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;start.x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;start.y&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;tend.x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;tend.y;
    line base;
    base.s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;start , base.e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tend;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
    {
        cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;h[i].x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;h[i].y;
    }
    line tmp;
    point tmpiont;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  ; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n ; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            tmp.s&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;h[i] , tmp.e&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;h[j];
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(segxline(tmp,base)){
                tmpiont &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; spoint(tmp,base);
                q[i].push_back(tmpiont);
                q[j].push_back(tmpiont);
            }
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        sort(q[i].begin() , q[i].end() , cmp);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; hi , ki;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(m&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
        cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;hi&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;ki;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(q[hi].size()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ki){
            cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
            cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;setiosflags(ios&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;fixed)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;setprecision(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
            cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;q[hi][ki&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;q[hi][ki&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].y&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;j-parallel-sorthttpsacnowcodercomacmcontest12548j&#34;&gt;&lt;a href=&#34;https://ac.nowcoder.com/acm/contest/12548/J&#34;&gt;J-Parallel Sort&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;题意-3&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;给出一串数组，保证每个数字都只出现一次。每一轮可以交换任意多组数字，问最少几轮使其为正序&lt;/p&gt;
&lt;h4 id=&#34;算法-3&#34;&gt;算法&lt;/h4&gt;
&lt;p&gt;考虑两种情况&lt;/p&gt;
&lt;h5 id=&#34;情况一&#34;&gt;情况一&lt;/h5&gt;
&lt;p&gt;$a[i]==a[a[i]]$ 此时，只用一轮即可，交换$a[i]$和$a[a[i]]$&lt;/p&gt;
&lt;h5 id=&#34;情况2&#34;&gt;情况2&lt;/h5&gt;
&lt;p&gt;$a[i]!=a[a[i]]$&lt;/p&gt;
&lt;p&gt;此时需要两轮完成。将其考虑为一个序列12345&lt;/p&gt;
&lt;p&gt;其中目前面临的数据为23451,需要将其轮换&lt;/p&gt;
&lt;p&gt;则第一轮交换14,23，第二轮则交换15,24&lt;/p&gt;
&lt;p&gt;可见，第一轮为a[i]与a[n-i-1]交换，第二轮为a[i]与a[n-i]交换&lt;/p&gt;
&lt;h4 id=&#34;代码-3&#34;&gt;代码&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;100001&lt;/span&gt;], vis[&lt;span style=&#34;color:#ae81ff&#34;&gt;100001&lt;/span&gt;];
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; swa;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; turn;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	ios&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sync_with_stdio(false);
	cin.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), cout.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
	cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
		cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;a[i];
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n ; i &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(vis[i]&lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;a[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;i) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(a[a[i]]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;i){
			swa.push_back(i);
			swa.push_back(a[i]);
			vis[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
			vis[a[i]]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		}&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
			turn.push_back({});
			&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;{
				turn[turn.size()&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].push_back(k);
				vis[k]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
				k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a[k];
			}&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(k&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;i);
			vis[a[k]]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(swa.size()&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;turn.size()&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
		cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(swa.size()&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;turn.size()&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
		cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
		cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;swa.size()&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; i : swa){
			cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i;
		}
		cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	}
	cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; i : turn){
		num&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;(i.size()&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
	}
	cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;num&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;swa.size()&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; i : swa){
		cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; i : turn){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ,k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i.size()&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;k;j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;,k&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; ){
			cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i[j]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i[k];
		}
	}
	cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
	num&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; i : turn){
		num&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;i.size()&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
	}
	cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;num;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; i : turn){
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ,k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i.size()&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;k;j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;,k&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; ){
			cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i[j]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i[k];
		}
	}
	cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>GDUT15th</title>
      <link>https://siyangshao.github.io/posts/gdut15th/</link>
      <pubDate>Sun, 28 Mar 2021 16:20:22 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/gdut15th/</guid>
      <description>A.M形字符串 题意： 给出一个长度为n的字符串，求解其有多少个前缀是M形字符串（两个相同的回文串拼接）
算法： 注意到若一个字符串是M形字符串，则字符串$[0,i]$和字符串$[0,\frac{i+1}{2}]$必为回文串
则可通过字符串Hash预处理并判断
对字符串正反Hash预处理（自然溢出）：
void makeHash() { s[0] = 1; for (int i = 1; i &amp;lt; N; i++) s[i] = p * s[i - 1]; for (int i = 1; i &amp;lt; N; i++) hashL[i] = hashL[i - 1] * p + m[i] - &amp;#39;a&amp;#39;; for (int i = n; i &amp;gt;= 1; i--) hashR[n + 1 - i] = hashR[n - i] * p + m[i] - &amp;#39;a&amp;#39;; } 判断该字符串是否为回文串：</description>
      <content>&lt;h2 id=&#34;am形字符串httpsacnowcodercomacmcontest13504a&#34;&gt;&lt;a href=&#34;https://ac.nowcoder.com/acm/contest/13504/A&#34;&gt;A.M形字符串&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意&#34;&gt;题意：&lt;/h3&gt;
&lt;p&gt;给出一个长度为n的字符串，求解其有多少个前缀是M形字符串（两个相同的回文串拼接）&lt;/p&gt;
&lt;h3 id=&#34;算法&#34;&gt;算法：&lt;/h3&gt;
&lt;p&gt;注意到若一个字符串是M形字符串，则字符串$[0,i]$和字符串$[0,\frac{i+1}{2}]$必为回文串&lt;/p&gt;
&lt;p&gt;则可通过字符串Hash预处理并判断&lt;/p&gt;
&lt;p&gt;对字符串正反Hash预处理（自然溢出）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;makeHash&lt;/span&gt;() {
    s[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) s[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; s[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) hashL[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashL[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) hashR[n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashR[n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;判断该字符串是否为回文串：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; st, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ed) {
    ull t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashL[ed] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; hashL[st &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; s[ed &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; st &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    ull t2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashR[n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; st] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; hashR[n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ed] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; s[ed &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; st &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (t1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; t2)&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;代码&#34;&gt;代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; ull;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2e5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;133&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; m[N];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n;
ull hashL[N], hashR[N], s[N];

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;makeHash&lt;/span&gt;() {
    s[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) s[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; s[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; N; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) hashL[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashL[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) hashR[n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashR[n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;;
}


&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; st, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ed) {
    ull t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashL[ed] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; hashL[st &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; s[ed &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; st &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    ull t2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashR[n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; st] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; hashR[n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ed] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; s[ed &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; st &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (t1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; t2)&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    ios&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sync_with_stdio(false);
    cin.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), cout.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strlen(m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    makeHash();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (check(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, i)) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (check(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, (i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)) {
                res&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
            }
        }
    }
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;b找山坡httpsacnowcodercomacmcontest13504b&#34;&gt;&lt;a href=&#34;https://ac.nowcoder.com/acm/contest/13504/B&#34;&gt;B.找山坡&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意-1&#34;&gt;题意：&lt;/h3&gt;
&lt;p&gt;找到使得$R-L$最大的$R$和$L$，满足$a[R]==a[L]$且对$i\in [L,R]$有$a[i]\geq a[L]$&lt;/p&gt;
&lt;h3 id=&#34;算法-1&#34;&gt;算法：&lt;/h3&gt;
&lt;p&gt;构建一个内部由小到大排序的堆栈使栈顶为min，对$a[i]$做如下处理：&lt;/p&gt;
&lt;p&gt;若$a[i]&amp;lt;top$，则弹出$top$直到$a[i]\geq top$，并将$a[i]$入栈&lt;/p&gt;
&lt;p&gt;若$a[i]&amp;gt;top$，将$a[i]$入栈&lt;/p&gt;
&lt;p&gt;若$a[i]=top$，$ans=max(i-top)$&lt;/p&gt;
&lt;p&gt;即：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (top &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; a[st[top]] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a[i])
			top&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (top &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; a[st[top]] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; a[i])
			ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(ans, i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; st[top]);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
			st[&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;top] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;代码-1&#34;&gt;代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maxn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a[maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; st[maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; top;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n;
	scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a[i]);
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (top &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; a[st[top]] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a[i])
			top&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (top &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; a[st[top]] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; a[i])
			ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(ans, i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; st[top]);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
			st[&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;top] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
	}

	printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, ans);

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;c涂墙httpsacnowcodercomacmcontest13504c&#34;&gt;&lt;a href=&#34;https://ac.nowcoder.com/acm/contest/13504/C&#34;&gt;C.涂墙&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意-2&#34;&gt;题意：&lt;/h3&gt;
&lt;p&gt;给出一个自然数n，判断n是否能表示成五个正整数平方和&lt;/p&gt;
&lt;h3 id=&#34;算法1&#34;&gt;算法1：&lt;/h3&gt;
&lt;p&gt;DFS减支（较low）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; s, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YES&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
        flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(s, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {

        flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        s &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i;
        dfs(s, p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flag) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
        s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i;
    }


}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;算法2&#34;&gt;算法2：&lt;/h3&gt;
&lt;p&gt;由拉格朗日平方和定理：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个正整数都可以表示为四个平方数（包括0）的和&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意到169可以表示为1个或2个或3个或4个平方数的和
$$
169=13^2\&lt;br&gt;
169=12^2+5^2\&lt;br&gt;
169=12^2+4^2+3^2\&lt;br&gt;
169=10^2+8^2+2^2+1^2\&lt;br&gt;
169=12^2+4^2+2^2+2^2+1^2
$$
所以对一个不小于169的正整数，必然满足条件（n-169可以用1~4个表示，必然能凑出五个）&lt;/p&gt;
&lt;p&gt;对于小于169的正整数，发现0,1,2,3,4,6,7,9,10,12,15,18,33不满足&lt;/p&gt;
&lt;h3 id=&#34;代码-2&#34;&gt;代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t;
	cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; t;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (t&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n;
		cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;
			n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;
			n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;) {
			cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YES&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;g分割httpsacnowcodercomacmcontest13504g&#34;&gt;&lt;a href=&#34;https://ac.nowcoder.com/acm/contest/13504/G&#34;&gt;G.分割&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意-3&#34;&gt;题意：&lt;/h3&gt;
&lt;p&gt;给出n条平行于y轴的直线和m条平行于x轴的直线，求他们可能形成的矩形的和&lt;/p&gt;
&lt;h3 id=&#34;算法-2&#34;&gt;算法：&lt;/h3&gt;
&lt;p&gt;$$
Sum = \Sigma{(x_i-x_{i-1})\cdot(y_i-y_{i-1})}\&lt;br&gt;
Sum = \Sigma{(x_i\cdot{(2i-1-n)})}\cdot\Sigma(y_i\cdot{(2i-1-m)})
$$&lt;/p&gt;
&lt;h3 id=&#34;代码-3&#34;&gt;代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n,m;
&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; sumx , sumy;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; mod &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000007&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;100001&lt;/span&gt;] , y[&lt;span style=&#34;color:#ae81ff&#34;&gt;100001&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; a , &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; b){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;b;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;m;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;x[i];
        x[i]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000000000&lt;/span&gt;;
    }
    sort(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;n,cmp);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        sumx &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x[i]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;mod;
        sumx&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;mod;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;y[i];
        y[i]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000000000&lt;/span&gt;;
    }
    sort(y&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,y&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;m,cmp);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        sumy &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; y[i]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;m) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;mod;
        sumy&lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt;mod;
    }
    cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;sumx&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sumy&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;mod&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;i母牛哥与子序列httpsacnowcodercomacmcontest13504i&#34;&gt;&lt;a href=&#34;https://ac.nowcoder.com/acm/contest/13504/I&#34;&gt;I.母牛哥与子序列&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意-4&#34;&gt;题意:&lt;/h3&gt;
&lt;p&gt;计算一个子序列所有非空子序列的积的和&lt;/p&gt;
&lt;h3 id=&#34;算法-3&#34;&gt;算法:&lt;/h3&gt;
&lt;p&gt;$$
Ans = Ans\cdot(a_i+1)+a_i
$$&lt;/p&gt;
&lt;h3 id=&#34;代码-4&#34;&gt;代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; ll;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; ll mod &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000007&lt;/span&gt;;
ll n , a , ans;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;a;
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(ll i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; ; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;a;
        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((ans)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;mod&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a;
        ans &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; mod;
    }
    cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;ans&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;e捡贝壳httpsacnowcodercomacmcontest13504e&#34;&gt;&lt;a href=&#34;https://ac.nowcoder.com/acm/contest/13504/E&#34;&gt;E.捡贝壳&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意-5&#34;&gt;题意：&lt;/h3&gt;
&lt;p&gt;给出一个数列，多次查询，其中$[l,r]$里有多少个$x$的整数倍&lt;/p&gt;
&lt;p&gt;P.S 一开始数据较弱，完全彻底的暴力搜索（遍历）可以过掉，复杂度差不多是1e9数量级？&lt;/p&gt;
&lt;h3 id=&#34;算法-4&#34;&gt;算法：&lt;/h3&gt;
&lt;p&gt;用vector存储大小为i的数字的位置&lt;/p&gt;
&lt;p&gt;即：q[t]={a , b , c} 表现大小为t的数字的形式&lt;/p&gt;
&lt;p&gt;那么可以用二分查找找到大小为t的数字在l到r区间内出现了多少次&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; upper_bound(a[i].begin(),a[i].end(),r)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lower_bound(a[i].begin(),a[i].end(),l);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;遍历x的整数倍累加就可以得到解答&lt;/p&gt;
&lt;h3 id=&#34;代码-5&#34;&gt;代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; ll;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;100010&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, q, t,maxn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; q;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;t);
        a[t].push_back(i);
        maxn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(maxn , t);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; l, r, x;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (q&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;l, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;r, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; maxn; i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; upper_bound(a[i].begin(), a[i].end(), r) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lower_bound(a[i].begin(), a[i].end(), l);
            ans &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; temp;
        }
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>CodeForces Educational Round 106</title>
      <link>https://siyangshao.github.io/posts/codeforces-educational-round-106/</link>
      <pubDate>Sun, 28 Mar 2021 16:16:55 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/codeforces-educational-round-106/</guid>
      <description>A.Domino on Windowsill 略
#include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; int t , n , k1 , k2 , w , b; int main(){ ios::sync_with_stdio(false); cin.tie(0),cout.tie(0); cin&amp;gt;&amp;gt;t; while(t--){ cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;k1&amp;gt;&amp;gt;k2&amp;gt;&amp;gt;w&amp;gt;&amp;gt;b; if((k1+k2&amp;lt;w+w)||(n+n-k1-k2&amp;lt;b+b)){ cout&amp;lt;&amp;lt;&amp;#34;NO\n&amp;#34;; }else{ w -= min(k1,k2); w -= abs(k1-k2)/2; b -= min(n-k1 , n-k2); b -= abs((n-k1)-(n-k2))/2; if(w&amp;lt;=0&amp;amp;&amp;amp;b&amp;lt;=0){ cout&amp;lt;&amp;lt;&amp;#34;YES\n&amp;#34;; }else{ cout&amp;lt;&amp;lt;&amp;#34;NO\n&amp;#34;; } } } } B.Binary Removals 题意 给出一个字符串，判断能否消去任意个非连续的字符使得其为单调序列
算法 略
代码 #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; int t ; string s; int main(){ cin&amp;gt;&amp;gt;t; while(t--){ cin&amp;gt;&amp;gt;s; int x = -1; for(int i = 0 ; i &amp;lt; s.</description>
      <content>&lt;h2 id=&#34;adomino-on-windowsillhttpscodeforcescomcontest1499problema&#34;&gt;&lt;a href=&#34;https://codeforces.com/contest/1499/problem/A&#34;&gt;A.Domino on Windowsill&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t , n , k1 , k2 , w , b;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    ios&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sync_with_stdio(false);
    cin.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),cout.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;t;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(t&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
        cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;k1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;k2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;w&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;b;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;((k1&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;k2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;w&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;w)&lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;k1&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;k2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;b)){
            cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
            w &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; min(k1,k2);
            w &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; abs(k1&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;k2)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
            b &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; min(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;k1 , n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;k2);
            b &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; abs((n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;k1)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;k2))&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(w&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
                cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YES&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
            }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
                cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;bbinary-removalshttpscodeforcescomcontest1499problemb&#34;&gt;&lt;a href=&#34;https://codeforces.com/contest/1499/problem/B&#34;&gt;B.Binary Removals&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意&#34;&gt;题意&lt;/h3&gt;
&lt;p&gt;给出一个字符串，判断能否消去任意个非连续的字符使得其为单调序列&lt;/p&gt;
&lt;h3 id=&#34;算法&#34;&gt;算法&lt;/h3&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;代码&#34;&gt;代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t ;
string s;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;t;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(t&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
        cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;s;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; s.length(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(s[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;){
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;s.length()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;s[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;){
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
                }
                x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            }
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;==-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
            cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YES&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
            &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; s.length() ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(s[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;){
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;s.length()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;s[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;){
                        cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
                        flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
                    }
                }
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;flag){
                cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YES&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cminimum-grid-pathhttpscodeforcescomcontest1499problemc&#34;&gt;&lt;a href=&#34;https://codeforces.com/contest/1499/problem/C&#34;&gt;C.Minimum Grid Path&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;题意-1&#34;&gt;题意&lt;/h3&gt;
&lt;p&gt;从(0,0)到(n,n)，每走一次（任意步）的单步消耗为c[i]，且每次走完必须转向，求最小消耗的代价&lt;/p&gt;
&lt;h3 id=&#34;算法-1&#34;&gt;算法&lt;/h3&gt;
&lt;p&gt;从1~n遍历c[i]，选x向和y向的最小值走最大，其他的都只走一步，最终选取ans最小值&lt;/p&gt;
&lt;h4 id=&#34;注意&#34;&gt;注意！！！&lt;/h4&gt;
&lt;p&gt;本题由于$c_i$数据量级在$10^9$，导致如果初始化ans为$ans=0x3f3f3f3f$时在Case 4会不够大，直接输出结果为0x3f3f3f3f&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;所以初始化为1e16&lt;/p&gt;
&lt;h3 id=&#34;代码-1&#34;&gt;代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#75715e&#34;&gt;#define ll long long
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; t;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (t&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
		ll n, x;
		ll sum1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, sum2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		ll mn1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e16&lt;/span&gt;, mn2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e16&lt;/span&gt;;
		ll ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e16&lt;/span&gt;;
		ll c1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, c2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

		cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
			cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
				c1&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
				sum1 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x;
				mn1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(mn1, x);
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				c2&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
				sum2 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; x;
				mn2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(mn2, x);
			}

			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
				ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(ans, (sum1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; mn1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; mn2) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; mn1 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
								   mn2 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
			}
		}
		cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>线性代数</title>
      <link>https://siyangshao.github.io/posts/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</link>
      <pubDate>Sat, 20 Mar 2021 16:12:43 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</guid>
      <description>线性代数 知识点 行列式性质 对$A=\left[\begin{array}{cccc}{a_{11}} &amp;amp; {a_{12}} &amp;amp; {\cdots} &amp;amp; {a_{1 n}} \ {a_{21}} &amp;amp; {a_{22}} &amp;amp; {\cdots} &amp;amp; {a_{2 n}} \ {\vdots} &amp;amp; {\vdots} &amp;amp; {\ddots} &amp;amp; {\vdots} \ {a_{m 1}} &amp;amp; {a_{m 2}} &amp;amp; {\cdots} &amp;amp; {a_{m n}}\end{array}\right] $的行列式A，将其化简为$A=\left[\begin{array}{cccc}{a_{11}} &amp;amp; {a_{12}} &amp;amp; {\cdots} &amp;amp; {a_{1 n}} \ {0} &amp;amp; {a_{22}} &amp;amp; {\cdots} &amp;amp; {a_{2 n}} \ {\vdots} &amp;amp; {\vdots} &amp;amp; {\ddots} &amp;amp; {\vdots} \ {0} &amp;amp; {0} &amp;amp; {\cdots} &amp;amp; {a_{m n}}\end{array}\right]$，则行列式的值有 $$ A=a_{11}\cdot a_{22}\cdots a_{mn} $$</description>
      <content>&lt;h1 id=&#34;线性代数&#34;&gt;线性代数&lt;/h1&gt;
&lt;h2 id=&#34;知识点&#34;&gt;知识点&lt;/h2&gt;
&lt;h3 id=&#34;行列式性质&#34;&gt;行列式性质&lt;/h3&gt;
&lt;p&gt;对$A=\left[\begin{array}{cccc}{a_{11}} &amp;amp; {a_{12}} &amp;amp; {\cdots} &amp;amp; {a_{1 n}} \ {a_{21}} &amp;amp; {a_{22}} &amp;amp; {\cdots} &amp;amp; {a_{2 n}} \ {\vdots} &amp;amp; {\vdots} &amp;amp; {\ddots} &amp;amp; {\vdots} \ {a_{m 1}} &amp;amp; {a_{m 2}} &amp;amp; {\cdots} &amp;amp; {a_{m n}}\end{array}\right]
$的行列式A，将其化简为$A=\left[\begin{array}{cccc}{a_{11}} &amp;amp; {a_{12}} &amp;amp; {\cdots} &amp;amp; {a_{1 n}} \ {0} &amp;amp; {a_{22}} &amp;amp; {\cdots} &amp;amp; {a_{2 n}} \ {\vdots} &amp;amp; {\vdots} &amp;amp; {\ddots} &amp;amp; {\vdots} \ {0} &amp;amp; {0} &amp;amp; {\cdots} &amp;amp; {a_{m n}}\end{array}\right]$，则行列式的值有
$$
A=a_{11}\cdot a_{22}\cdots a_{mn}
$$&lt;/p&gt;
&lt;h4 id=&#34;tricks&#34;&gt;Tricks:&lt;/h4&gt;
&lt;p&gt;1.某行（列）加上or减去某行（列）几倍，行列式值不变&lt;/p&gt;
&lt;p&gt;2.某行（列）乘k，等于A*k&lt;/p&gt;
&lt;p&gt;3.互换两行（列），行列式变号&lt;/p&gt;
&lt;h3 id=&#34;行列式计算&#34;&gt;行列式计算&lt;/h3&gt;
&lt;h4 id=&#34;1&#34;&gt;1&lt;/h4&gt;
&lt;p&gt;$$
A=\left[\begin{array}{cccc}{x} &amp;amp; {a} &amp;amp; {\cdots} &amp;amp; {a} \ {a} &amp;amp; {x} &amp;amp; {\cdots} &amp;amp; {a} \ {\vdots} &amp;amp; {\vdots} &amp;amp; {\ddots} &amp;amp; {\vdots} \ {a} &amp;amp; {a} &amp;amp; {\cdots} &amp;amp; {x}\end{array}\right]=(x-a)^{n-1}[x+(n-1)a]
$$&lt;/p&gt;
&lt;h4 id=&#34;2&#34;&gt;2&lt;/h4&gt;
&lt;p&gt;$$
A=\left[\begin{array}{cccc}{1} &amp;amp; {1} &amp;amp; {\cdots} &amp;amp; {1} \ {x_{1}} &amp;amp; {x_{2}} &amp;amp; {\cdots} &amp;amp; {x_n} \ {\vdots} &amp;amp; {\vdots} &amp;amp; {\ddots} &amp;amp; {\vdots} \ {x_1^{n-1}} &amp;amp; {x_2^{n-1}} &amp;amp; {\cdots} &amp;amp; {x_n^{n-1}}\end{array}\right] \begin{aligned}&amp;amp;= (x_n-x_{n-1})(x_n-x_{n-2})(x_n-x_{n-3})\cdots(x_n-x_1)\  &amp;amp;\times(x_{n-1}-x{n-2})(x_{n-1}-x_{n-3})\cdots (x_{n-1}-x_1)\&amp;amp;\times\cdots\&amp;amp;\times(x_2-x_1)\end{aligned}
$$&lt;/p&gt;
&lt;h4 id=&#34;3&#34;&gt;3&lt;/h4&gt;
&lt;p&gt;两行（列）相同/成比例时，行列式值为0&lt;/p&gt;
&lt;p&gt;两行（列）为两项相加减时，行列式可拆分为两个行列式相加减&lt;/p&gt;
&lt;h4 id=&#34;4-余子式代数余子式&#34;&gt;4 余子式/代数余子式&lt;/h4&gt;
&lt;p&gt;余子式：$M_{ab}$即抹掉a行b列，计算行列式值&lt;/p&gt;
&lt;p&gt;代数余子式：$A_{ab}=(-1)^{a+b}*M_{ab}$&lt;/p&gt;
&lt;h4 id=&#34;5&#34;&gt;5&lt;/h4&gt;
&lt;p&gt;$$
D=a_{i1}A_{i1}+a_{i2}A_{i2}+\cdots +a_{in}A_{in}(第i行)\&lt;br&gt;
D=a_{1j}A_{1j}+a_{2j}A_{2j}+\cdots+a_{nj}A{nj}(第j列)
$$&lt;/p&gt;
&lt;h4 id=&#34;6-多个a或m相加减&#34;&gt;6 多个A或M相加减&lt;/h4&gt;
&lt;h5 id=&#34;多个a相加&#34;&gt;多个A相加&lt;/h5&gt;
&lt;p&gt;对$x\cdot A_{ij}$而言，将$a_{ij}$替换为$x$，带入计算行列式的值即为结果&lt;/p&gt;
&lt;h5 id=&#34;多个m相加&#34;&gt;多个M相加&lt;/h5&gt;
&lt;p&gt;将M转化为A，而后替换&lt;/p&gt;
&lt;h4 id=&#34;7-给一方程组-判断解的情况&#34;&gt;7 给一方程组 判断解的情况&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方程组&lt;/th&gt;
&lt;th&gt;$D\not=0$&lt;/th&gt;
&lt;th&gt;$D=0$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;齐次&lt;/td&gt;
&lt;td&gt;只有一组零解&lt;/td&gt;
&lt;td&gt;有零解与非零解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;非齐次&lt;/td&gt;
&lt;td&gt;只有一组非零解&lt;/td&gt;
&lt;td&gt;有多个解或无解&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;齐次：方程组除了x与0，没有常数项&lt;/p&gt;
&lt;p&gt;非齐次：有常数项&lt;/p&gt;
&lt;p&gt;D：将$x_1,x_2\cdots x_n$前系数提取得到的行列式的值&lt;/p&gt;
&lt;h3 id=&#34;矩阵的运算&#34;&gt;矩阵的运算&lt;/h3&gt;
&lt;h4 id=&#34;1矩阵的加减&#34;&gt;1.矩阵的加减&lt;/h4&gt;
&lt;p&gt;直接加&lt;/p&gt;
&lt;h3 id=&#34;2矩阵相乘&#34;&gt;2.矩阵相乘&lt;/h3&gt;
&lt;p&gt;方法：前行乘后列&lt;/p&gt;
&lt;h4 id=&#34;特殊矩阵&#34;&gt;特殊矩阵&lt;/h4&gt;
&lt;p&gt;$ \left{
\begin{matrix}
0 &amp;amp; 0 &amp;amp; 0 \&lt;br&gt;
0 &amp;amp; 0 &amp;amp; 0 \&lt;br&gt;
0 &amp;amp; 0 &amp;amp; 0
\end{matrix}
\right}=0 $&lt;/p&gt;
&lt;p&gt;$ \left{
\begin{matrix}
1 &amp;amp; 0 &amp;amp; 0 \&lt;br&gt;
0 &amp;amp; 1 &amp;amp; 0 \&lt;br&gt;
0 &amp;amp; 0 &amp;amp; 1
\end{matrix}
\right}=I $&lt;/p&gt;
&lt;p&gt;$I\cdot A=A$		 $A\cdot I=A$ 		$I^2=I\cdot I = I$&lt;/p&gt;
&lt;p&gt;矩阵乘法不满足交换律！！！（$E$除外）&lt;/p&gt;
&lt;p&gt;相似矩阵：&lt;/p&gt;
&lt;h4 id=&#34;3矩阵取绝对值&#34;&gt;3.矩阵取绝对值&lt;/h4&gt;
&lt;p&gt;计算行列式$A$的值即为矩阵$A$的值&lt;/p&gt;
&lt;p&gt;其中，$\left|\lambda A\right|=\lambda^n\left|A\right|$&lt;/p&gt;
&lt;h4 id=&#34;4矩阵转置&#34;&gt;4.矩阵转置&lt;/h4&gt;
&lt;p&gt;$A^T$将A的行变为列，列变为行&lt;/p&gt;
&lt;p&gt;注意：$1.(AB)^T=B^TA^T$	$2.\left|A^T\right|=\left|A\right|$&lt;/p&gt;
&lt;h4 id=&#34;5证明矩阵可逆&#34;&gt;5.证明矩阵可逆&lt;/h4&gt;
&lt;p&gt;条件：1.矩阵A为方阵（&lt;strong&gt;行数与列数相等&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;​			2. $\left|A\right|\not=0$或者存在一个方阵B，满足$AB=I$或者$BA=I$&lt;/p&gt;
&lt;h4 id=&#34;6求逆矩阵&#34;&gt;6.求逆矩阵&lt;/h4&gt;
&lt;p&gt;$$
\left(A ,\vdots, I\right)\rightarrow\left(I ,\vdots, A^{-1}\right)
$$&lt;/p&gt;
&lt;h4 id=&#34;7利用acdot-a-1i或a-1cdot-ai计算&#34;&gt;7.利用$A\cdot A^{-1}I=$或$A^{-1}\cdot A=I$计算&lt;/h4&gt;
&lt;p&gt;利用该性质等号两边同时乘以逆矩阵而后做到除法效果&lt;/p&gt;
&lt;h4 id=&#34;8伴随矩阵&#34;&gt;8.伴随矩阵&lt;/h4&gt;
&lt;p&gt;$A^*$为$A$的伴随矩阵&lt;/p&gt;
&lt;p&gt;其中，$A^*$的第$i$行$j$列是$$&lt;/p&gt;
&lt;p&gt;$A\cdot A^&lt;em&gt;=\left|A\right| I$或$A^&lt;/em&gt; \cdot A=\left|A\right| I$&lt;/p&gt;
&lt;h4 id=&#34;9求矩阵的秩&#34;&gt;9.求矩阵的秩&lt;/h4&gt;
&lt;p&gt;将矩阵化简为行阶梯形，有几行有非零数，秩就是多少&lt;/p&gt;
&lt;h5 id=&#34;trick&#34;&gt;Trick：&lt;/h5&gt;
&lt;p&gt;以下内容等价&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$A$可逆&lt;/li&gt;
&lt;li&gt;$A$的相抵标准型是$n$阶单位矩阵&lt;/li&gt;
&lt;li&gt;$A$可以表示为若干初等矩阵的积&lt;/li&gt;
&lt;li&gt;存在$n$阶矩阵$B$，使得$AB=I$&lt;/li&gt;
&lt;li&gt;若$A$是$n$阶矩阵，则$A$可逆，$r(A)=n$&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;向量组与线性空间&#34;&gt;向量组与线性空间&lt;/h3&gt;
&lt;h4 id=&#34;判断某向量是否可以由某向量组线性表示&#34;&gt;判断某向量是否可以由某向量组线性表示&lt;/h4&gt;
&lt;p&gt;若$\left(a_1,a_2\cdots b\right)$的秩和$(a_1,a_2\cdots a_m , b)$的秩相等，则$b$可以由$a_1,a_2,a_3\cdots a_m$线性表示&lt;/p&gt;
&lt;h4 id=&#34;判断某个向量组是否线性相关&#34;&gt;判断某个向量组是否线性相关&lt;/h4&gt;
&lt;p&gt;若$R$&amp;lt;向量个数，则线性相关；若R=向量个数，则线性无关&lt;/p&gt;
&lt;h4 id=&#34;已知三维向量空间的一组基底求某一向量在此基地下的坐标&#34;&gt;已知三维向量空间的一组基底，求某一向量在此基地下的坐标&lt;/h4&gt;
&lt;p&gt;对空间向量的一组基底$\alpha_1,\alpha_2,\alpha_3$，向量$\beta$的坐标$k_1,k_2,k_3$满足:
$$
\beta=k_1\alpha_1+k_2\alpha_2+k_3\alpha_c
$$&lt;/p&gt;
&lt;h4 id=&#34;求一组向量的极大无关组&#34;&gt;求一组向量的极大无关组&lt;/h4&gt;
&lt;p&gt;对于行向量$a_1,a_2,a_3,a_4$求其极大无关组&lt;/p&gt;
&lt;p&gt;将其写入矩阵，变换为最简行阶梯型。则非零行（由上至下）即为其极大无关组&lt;/p&gt;
&lt;h3 id=&#34;解方程组&#34;&gt;解方程组&lt;/h3&gt;
&lt;p&gt;齐次方程组：&lt;/p&gt;
&lt;p&gt;​				$R(A)=未知数个数$ 唯一解（零解）&lt;/p&gt;
&lt;p&gt;​				$R(A)&amp;lt;未知数个数$ 多个解（零解和多个非零解）&lt;/p&gt;
&lt;p&gt;非齐次方程组：&lt;/p&gt;
&lt;p&gt;​				$R(A)\not=R(A|b)$ 无解&lt;/p&gt;
&lt;p&gt;​				$R(A)=R(A|b)=未知数个数$ 一个非零解&lt;/p&gt;
&lt;p&gt;​				$R(A)=R(A|b)&amp;lt;未知数个数$ 多个非零解&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B01/image-20210320162138852.png&#34; alt=&#34;线性代数&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../images/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B01/image-20210320162726234.png&#34; alt=&#34;基础解系&#34;&gt;&lt;/p&gt;
&lt;p&gt;集合中线性无关的解向量个数：&lt;/p&gt;
&lt;p&gt;​		齐次：未知数个数减去秩&lt;/p&gt;
&lt;p&gt;​		非齐次：未知数个数减去秩加一&lt;/p&gt;
&lt;h4 id=&#34;矩阵特征值&#34;&gt;矩阵特征值&lt;/h4&gt;
&lt;p&gt;满足$\left|A-\lambda E\right|=0$的$\lambda$为特征值&lt;/p&gt;
&lt;h4 id=&#34;特征向量&#34;&gt;特征向量&lt;/h4&gt;
&lt;p&gt;$(A-\lambda E)x=0$的通解&lt;/p&gt;
&lt;h4 id=&#34;判断方阵是否与对角线相似是否满足p-1apa&#34;&gt;判断方阵是否与对角线相似/是否满足$P^{-1}AP=A$&lt;/h4&gt;
&lt;p&gt;方阵特征向量等于方阵阶数：相似/满足&lt;/p&gt;
&lt;p&gt;不等于：不相似/不满足&lt;/p&gt;
&lt;h4 id=&#34;求对角阵可逆变换矩阵&#34;&gt;求对角阵/可逆变换矩阵&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;../images/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B01/image-20210320180006361.png&#34; alt=&#34;image-20210320180006361&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;历年卷&#34;&gt;历年卷&lt;/h2&gt;
&lt;p&gt;矩阵相抵定义：$存在可逆矩阵P,Q,使得PAQ=B$&lt;/p&gt;
&lt;p&gt;矩阵相似定义：$存在实可逆矩阵P,是的P^{-1}AP=B$&lt;/p&gt;
&lt;p&gt;由此：矩阵相似则必定相抵，反之不一定&lt;/p&gt;
&lt;p&gt;矩阵可逆的充分必要条件：与单位矩阵相抵&lt;/p&gt;
&lt;p&gt;矩阵可对角化（与对角阵相似）的&lt;strong&gt;充分&lt;/strong&gt;条件：有n个不同的特征值&lt;/p&gt;
&lt;p&gt;n阶方阵与对角阵相似的充要条件：有n个线性无关的特征向量&lt;/p&gt;
&lt;p&gt;充要条件：有n个线性无关特征向量&lt;/p&gt;
&lt;p&gt;注意：相似矩阵的&lt;strong&gt;秩、行列式值、迹、特征值、特征多项式&lt;/strong&gt;均相等&lt;/p&gt;
&lt;p&gt;正交一定线性无关，线性无关不一定正交（nmd 正交就是垂直&lt;/p&gt;
&lt;p&gt;行满秩情况下$R(A)=R(A|B)$，但是列满秩情况下不一定&lt;/p&gt;
&lt;p&gt;$AA^&lt;em&gt;=\left|A\right|I$
$$
A^&lt;/em&gt;=\left|A\right|A^{-1}
$$&lt;/p&gt;
&lt;p&gt;$$
|A||A^{-1}|=I\&lt;br&gt;
|A^{-1}|=\frac{1}{|A|}\&lt;br&gt;
|A^*|=|A|^{n-1}
$$&lt;/p&gt;
&lt;p&gt;对于$A=BC$，有$A^n=B(CB)^{n-1}C$&lt;/p&gt;
&lt;h3 id=&#34;规范正交化&#34;&gt;规范正交化&lt;/h3&gt;
&lt;p&gt;对线性无关$a_1,a_2,a_3:$
$$
b_1=a_1\&lt;br&gt;
b_2=a_2-\frac{b_1\cdot a_2}{b_1 \cdot b_1}b_1\&lt;br&gt;
b_3=a_3-\frac{b_1\cdot a_3}{b_1 \cdot b_1}b_1-\frac{b_2 \cdot a_3}{b_2 \cdot b_2}b2
$$
证明$r(A)=r(A^TA)$，证明$Ax=0$与$A^TAx=0$同解即可&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>大学物理1</title>
      <link>https://siyangshao.github.io/posts/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%861/</link>
      <pubDate>Wed, 17 Mar 2021 16:08:07 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%861/</guid>
      <description>动量，冲量，角动量 $$ m_1v_1=m_2v_2\
I=mv-mv_0\
F=\frac{GMm}{R^2}=\frac{mv^2}{2}\
L=R\vec{m}\times\vec{v}（角动量）\
mr_1v_1=mr_2v_2\
M=J\alpha, 合力矩 $$
角动量守恒：$J_1\omega_1 =J_0\omega_0+mvl$，其中$mvl$表示系统中非旋转物体
譬如，取棒上距离转动点长度为$dr$的棒，所受到的摩擦力，计算到停止转动要多久： $$ df=\mu(dm)g=\mu\frac{m_1}{l}gdr\
dM=-rdf=-\mu\frac{m_1}{l}grdr\
M=\int dM=-\int_{0}^{l}\mu\frac{m_1}{l}grdr=-\frac{1}{2}\mu gm_1l\
由转动定律M=J\alpha得-\frac{1}{2}\mu gm_1l=J\frac{d\omega}{dt}\
即有\int_{0}^{t_1}-\frac{1}{2}\mu gm_1ldt=\int_{\omega_n}^{0}Jd\omega\
-\frac{\mu gm_1lt_1}{2}=-J\omega_0\
t_1=\frac{2m_2(u+v)}{\mu gm_1}+1 $$
曲率半径 由$g=\frac{v_x^2}{r}$可得，$r=\frac{v_x^2}{g}=\frac{(v\cos\alpha)^2}{g}$
简谐振动，波动 对$A_1cos(\omega t+\phi_1)$和$A_2cos(\omega t+\phi_2)$复合振动$Acos(\omega t+\phi)$，有： $$ A=\sqrt{A_1^2+A_2^2+2A_1A_2cos(\phi_2-\phi_1)}\
\phi=arctan\frac{A_1sin\phi_1+A_2sin\phi_2}{A_1cos\phi_1+A_2cos\phi_2} $$
简谐振动的能量 $$ E=\frac{1}{2}kA^2\
\omega = \sqrt{\frac{k}{m}}\
当\omega=2\pi f时\
f=\frac{1}{2\pi}\sqrt{\frac{k}{m}}\
T=2\pi\sqrt{\frac{m}{k}} $$
波的能量 动能 $$ \Delta W_k=\frac{1}{2}\Delta mv^2=\frac{1}{2}\rho \Delta V\omega^2A^2\sin^2\omega(t-\frac{x}{u}) $$
势能 $$ \Delta W_p=\frac{1}{2}E(\frac{\partial y}{\part x}^2)\Delta V=\frac{1}{2} \frac{E}{u^2}\omega^2A^2\sin^2\omega(t-\frac{x}{u})\Delta V $$
弹性势能 $$ \Delta W_p=\frac{1}{2}k(\Delta l)^2=\frac{1}{2}\frac{ES}{l}(\Delta l)^2=\frac{1}{2}ESl(\frac{\Delta l}{l})^2=\frac{1}{2}E\Delta V(\frac{\Delta l}{l})^2\</description>
      <content>&lt;h3 id=&#34;动量冲量角动量&#34;&gt;动量，冲量，角动量&lt;/h3&gt;
&lt;p&gt;$$
m_1v_1=m_2v_2\&lt;br&gt;
I=mv-mv_0\&lt;br&gt;
F=\frac{GMm}{R^2}=\frac{mv^2}{2}\&lt;br&gt;
L=R\vec{m}\times\vec{v}（角动量）\&lt;br&gt;
mr_1v_1=mr_2v_2\&lt;br&gt;
M=J\alpha, 合力矩
$$&lt;/p&gt;
&lt;p&gt;角动量守恒：$J_1\omega_1 =J_0\omega_0+mvl$，其中$mvl$表示系统中非旋转物体&lt;/p&gt;
&lt;p&gt;譬如，取棒上距离转动点长度为$dr$的棒，所受到的摩擦力，计算到停止转动要多久：
$$
df=\mu(dm)g=\mu\frac{m_1}{l}gdr\&lt;br&gt;
dM=-rdf=-\mu\frac{m_1}{l}grdr\&lt;br&gt;
M=\int dM=-\int_{0}^{l}\mu\frac{m_1}{l}grdr=-\frac{1}{2}\mu gm_1l\&lt;br&gt;
由转动定律M=J\alpha得-\frac{1}{2}\mu gm_1l=J\frac{d\omega}{dt}\&lt;br&gt;
即有\int_{0}^{t_1}-\frac{1}{2}\mu gm_1ldt=\int_{\omega_n}^{0}Jd\omega\&lt;br&gt;
-\frac{\mu gm_1lt_1}{2}=-J\omega_0\&lt;br&gt;
t_1=\frac{2m_2(u+v)}{\mu gm_1}+1
$$&lt;/p&gt;
&lt;h4 id=&#34;曲率半径&#34;&gt;曲率半径&lt;/h4&gt;
&lt;p&gt;由$g=\frac{v_x^2}{r}$可得，$r=\frac{v_x^2}{g}=\frac{(v\cos\alpha)^2}{g}$&lt;/p&gt;
&lt;h3 id=&#34;简谐振动波动&#34;&gt;简谐振动，波动&lt;/h3&gt;
&lt;p&gt;对$A_1cos(\omega t+\phi_1)$和$A_2cos(\omega t+\phi_2)$复合振动$Acos(\omega t+\phi)$，有：
$$
A=\sqrt{A_1^2+A_2^2+2A_1A_2cos(\phi_2-\phi_1)}\&lt;br&gt;
\phi=arctan\frac{A_1sin\phi_1+A_2sin\phi_2}{A_1cos\phi_1+A_2cos\phi_2}
$$&lt;/p&gt;
&lt;h4 id=&#34;简谐振动的能量&#34;&gt;简谐振动的能量&lt;/h4&gt;
&lt;p&gt;$$
E=\frac{1}{2}kA^2\&lt;br&gt;
\omega = \sqrt{\frac{k}{m}}\&lt;br&gt;
当\omega=2\pi f时\&lt;br&gt;
f=\frac{1}{2\pi}\sqrt{\frac{k}{m}}\&lt;br&gt;
T=2\pi\sqrt{\frac{m}{k}}
$$&lt;/p&gt;
&lt;h4 id=&#34;波的能量&#34;&gt;波的能量&lt;/h4&gt;
&lt;h5 id=&#34;动能&#34;&gt;动能&lt;/h5&gt;
&lt;p&gt;$$
\Delta W_k=\frac{1}{2}\Delta mv^2=\frac{1}{2}\rho \Delta V\omega^2A^2\sin^2\omega(t-\frac{x}{u})
$$&lt;/p&gt;
&lt;h5 id=&#34;势能&#34;&gt;势能&lt;/h5&gt;
&lt;p&gt;$$
\Delta W_p=\frac{1}{2}E(\frac{\partial y}{\part x}^2)\Delta V=\frac{1}{2} \frac{E}{u^2}\omega^2A^2\sin^2\omega(t-\frac{x}{u})\Delta V
$$&lt;/p&gt;
&lt;h5 id=&#34;弹性势能&#34;&gt;弹性势能&lt;/h5&gt;
&lt;p&gt;$$
\Delta W_p=\frac{1}{2}k(\Delta l)^2=\frac{1}{2}\frac{ES}{l}(\Delta l)^2=\frac{1}{2}ESl(\frac{\Delta l}{l})^2=\frac{1}{2}E\Delta V(\frac{\Delta l}{l})^2\&lt;br&gt;
\Delta W_p=\frac{1}{2}\rho\Delta V\omega^2A^2\sin^2\omega(t-\frac{x}{u})
$$&lt;/p&gt;
&lt;h5 id=&#34;总机械能&#34;&gt;总机械能&lt;/h5&gt;
&lt;p&gt;$$
\Delta W=\Delta W_k+\Delta W_p = \rho \Delta V \omega^2A^2\sin^2\omega(t-\frac{x}{u})
$$&lt;/p&gt;
&lt;p&gt;波在传播过程中任一质元动能和势能都随时间t变化，同一时刻相位相同大小相等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动能最大值时势能也最大值&lt;/strong&gt;，位于平衡位置&lt;/p&gt;
&lt;p&gt;动能为零时势能也为零，位于&lt;strong&gt;振幅最大位置&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;反射波的计算&#34;&gt;反射波的计算&lt;/h4&gt;
&lt;p&gt;对一表达式$y_1=A\cos[2\pi(\frac{t}{T}-\frac{x}{\lambda})+\phi]$在$L$处反射，带入$x=L$，然后减去$2\pi\frac{2(L-x)}{\lambda}$（相位落后法得到距$L$为$x$的点），计算是否有无半波损失&lt;/p&gt;
&lt;h5 id=&#34;半波损失&#34;&gt;半波损失&lt;/h5&gt;
&lt;p&gt;波的反射点为固定端时有，相位差为$\pm\pi$&lt;/p&gt;
&lt;h4 id=&#34;驻波&#34;&gt;驻波&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;两列沿相反方向传播，振幅相同频率相同的波的叠加&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;$\lambda ：波长 \  v:频率,u:波速$&lt;/p&gt;
&lt;p&gt;$v=\frac{\lambda}{u}$&lt;/p&gt;
&lt;h5 id=&#34;波节&#34;&gt;波节&lt;/h5&gt;
&lt;p&gt;弦线上&lt;strong&gt;始终静止不动&lt;/strong&gt;的点&lt;/p&gt;
&lt;h5 id=&#34;波腹&#34;&gt;波腹&lt;/h5&gt;
&lt;p&gt;波节和波节之间，&lt;strong&gt;振幅最大的点&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;特征&#34;&gt;特征&lt;/h5&gt;
&lt;p&gt;具有交替出现的波峰、波谷&lt;/p&gt;
&lt;h5 id=&#34;方程&#34;&gt;方程&lt;/h5&gt;
&lt;p&gt;对正向波$y_1=A\cos(\omega(t-\frac{x}{u}))$，反向波$y_2=A\cos(\omega(t-\frac{x}{u}))$&lt;/p&gt;
&lt;p&gt;驻波$y=y_1+y_2$
$$
y=A\cos2\pi (vt-\frac{x}{\lambda})+A\cos2\pi(vt+\frac{x}{\lambda})
\由和差化积\&lt;br&gt;
y=(2A\cos2\pi\frac{x}{\lambda})\cos2\pi vt
$$
波腹处$x=\pm k\frac{\lambda}{2}$，波节处$x=\pm(2k+1)\frac{\lambda}{4}$&lt;/p&gt;
&lt;h5 id=&#34;特点&#34;&gt;特点&lt;/h5&gt;
&lt;p&gt;相邻两波节之间振动相位相同，波节两侧各质点振动相位相反&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>202103</title>
      <link>https://siyangshao.github.io/posts/202103/</link>
      <pubDate>Sat, 13 Mar 2021 22:22:26 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/202103/</guid>
      <description>​	下周就是期末考试了。微积分复习了大半，大学物理和线性代数还相当于没动过。也不知道是幸运还是不幸，拿到了一个昆明区域赛的名额。于是，我的3月就肉眼可见的忙了起来。本月已经过去了大半，我还未曾回过家。按照最初给自己的安排，下次回去或是清明最后一天，若没空的话那就只能等到五一了。
​	上海近些日子天气转暖，夜晚晚风令人愉悦。平心而论，在上大，我失去了大半信心，所有的冲劲与勇气。仿若得过且过般的混日子，一日又一日在虚假的努力下麻痹着自己。这样的日子还能持续多久？我不知道。奶茶喝了一瓶又一瓶，与同学骑车路过了上大附近一个又一个地方——但是，同学仍是我的高中同学。自从进了大学以来，我就没有什么新的人际交往了。倘若把上海大学的牌子换一换，也似乎毫无问题。但是，每次从空间和朋友圈看到出高中同学的大学生活，看到小学同学出国的offer，总是会感觉没有任何理由的疲惫与困乏。那些曾经的朋友，终究距离越来越远，差距也越来越大。
​	距离高考结束已经大半年过去了。没多久，现在的高三生又将步入高考的考场。可是，我仍然没有走出高考的阴霾。或者说，我在大学期间所做的一切努力也好疲敝也好，根本原因都是因为高考的结果。我到底什么时候才能走出高考的结果？很显然，我也不知道。但是，这个答案似乎是——永远也不。在每一个夜深人静的晚上，在每一次失利之时，我都会想起那天下午看到高考成绩的感觉——当时手上的杨枝甘露，客厅里打电话（还正是在讨论高考）的我的母亲，窗外正好的斜阳，书桌上方彼时正从翠绿转向枯萎的绿植，都刺眼地提醒着我的感受。毫不犹豫地说，这个场景就是我的噩梦。可是，我却无力改变他。
​	或许，我应该去看心理医生了。
 2020.3.24
 ​	前些日子，收到了南洋理工的面试通知。说是具体的邮件会在今天后发给我，但是今天等了一天邮箱也毫无动静。对我个人而言，收到面试通知这件事本身就是值得高兴的事情了——本来也没指望过能过，不是么？再过一周又几天，就是昆明站的区域赛了，而却我似乎毫无准备。一件又一件事情接踵而来，属实让人有点措不及防。
​	今天回上实看了看老师，蹭了史老师一顿饭，漫步在校园。第一感触就是——年轻真好。无论如何，实验还是有朝气的。我回忆当初，不是因为当初有多麽好，只是因为现在实在太差罢了。</description>
      <content>&lt;p&gt;​		下周就是期末考试了。微积分复习了大半，大学物理和线性代数还相当于没动过。也不知道是幸运还是不幸，拿到了一个昆明区域赛的名额。于是，我的3月就肉眼可见的忙了起来。本月已经过去了大半，我还未曾回过家。按照最初给自己的安排，下次回去或是清明最后一天，若没空的话那就只能等到五一了。&lt;/p&gt;
&lt;p&gt;​		上海近些日子天气转暖，夜晚晚风令人愉悦。平心而论，在上大，我失去了大半信心，所有的冲劲与勇气。仿若得过且过般的混日子，一日又一日在虚假的努力下麻痹着自己。这样的日子还能持续多久？我不知道。奶茶喝了一瓶又一瓶，与同学骑车路过了上大附近一个又一个地方——但是，同学仍是我的高中同学。自从进了大学以来，我就没有什么新的人际交往了。倘若把上海大学的牌子换一换，也似乎毫无问题。但是，每次从空间和朋友圈看到出高中同学的大学生活，看到小学同学出国的offer，总是会感觉没有任何理由的疲惫与困乏。那些曾经的朋友，终究距离越来越远，差距也越来越大。&lt;/p&gt;
&lt;p&gt;​		距离高考结束已经大半年过去了。没多久，现在的高三生又将步入高考的考场。可是，我仍然没有走出高考的阴霾。或者说，我在大学期间所做的一切努力也好疲敝也好，根本原因都是因为高考的结果。我到底什么时候才能走出高考的结果？很显然，我也不知道。但是，这个答案似乎是——永远也不。在每一个夜深人静的晚上，在每一次失利之时，我都会想起那天下午看到高考成绩的感觉——当时手上的杨枝甘露，客厅里打电话（还正是在讨论高考）的我的母亲，窗外正好的斜阳，书桌上方彼时正从翠绿转向枯萎的绿植，都刺眼地提醒着我的感受。毫不犹豫地说，这个场景就是我的噩梦。可是，我却无力改变他。&lt;/p&gt;
&lt;p&gt;​		或许，我应该去看心理医生了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2020.3.24&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​		前些日子，收到了南洋理工的面试通知。说是具体的邮件会在今天后发给我，但是今天等了一天邮箱也毫无动静。对我个人而言，收到面试通知这件事本身就是值得高兴的事情了——本来也没指望过能过，不是么？再过一周又几天，就是昆明站的区域赛了，而却我似乎毫无准备。一件又一件事情接踵而来，属实让人有点措不及防。&lt;/p&gt;
&lt;p&gt;​		今天回上实看了看老师，蹭了史老师一顿饭，漫步在校园。第一感触就是——年轻真好。无论如何，实验还是有朝气的。我回忆当初，不是因为当初有多麽好，只是因为现在实在太差罢了。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>CodeForces Educational Round 105</title>
      <link>https://siyangshao.github.io/posts/codeforces-educational-round-105/</link>
      <pubDate>Wed, 03 Mar 2021 16:15:19 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/codeforces-educational-round-105/</guid>
      <description>codeforces Educational Round 105补题
 C. 1D Sokoban 题目链接
题意： 从（0，0）将an向左or向右移动，最多能让多少个an与bm重合
算法 当a和b都大于0时：
可用一个数组表示从0~i，有多少个an与bm是初始重合的
（p表示a，sp表示b，下同）
map&amp;lt;long,bool&amp;gt;mp; for(long k:p) mp[k]=true; long n = p.size() , m = sp.size(); vector&amp;lt;long&amp;gt; cum(m+1,0); for(int i = 1; i&amp;lt;= m ; i++){ cum[i]=cum[i-1]+mp[sp[i-1]]; } 然后接下来利用upper_bound函数查找出推箱子到b[i]点的最多连续个数
for(int i = 0 ; i &amp;lt; m ;i++){ long can = cum[m] - cum[i+1];//can初始化为后续点中本来就为特殊点的个数  auto k = upper_boound(p.begin(),p.end(),sp[i]); if(k==p.end()){ long tot1 = n ; }else{ long tot1 = k - p.</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;codeforces Educational Round 105补题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;c-1d-sokoban&#34;&gt;C. 1D Sokoban&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/1494/problem/C&#34;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;题意&#34;&gt;题意：&lt;/h4&gt;
&lt;p&gt;从（0，0）将an向左or向右移动，最多能让多少个an与bm重合&lt;/p&gt;
&lt;h4 id=&#34;算法&#34;&gt;算法&lt;/h4&gt;
&lt;p&gt;当a和b都大于0时：&lt;/p&gt;
&lt;p&gt;可用一个数组表示从0~i，有多少个an与bm是初始重合的&lt;/p&gt;
&lt;p&gt;（p表示a，sp表示b，下同）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;mp;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; k:p) mp[k]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;
&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.size() , m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sp.size();
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; cum(m&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
    cum[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cum[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;mp[sp[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后接下来利用upper_bound函数查找出推箱子到b[i]点的最多连续个数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m ;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; can &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cum[m] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; cum[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];&lt;span style=&#34;color:#75715e&#34;&gt;//can初始化为后续点中本来就为特殊点的个数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; upper_boound(p.begin(),p.end(),sp[i]);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(k&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;p.end()){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; tot1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n ;
    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; tot1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; p.begin();
        &lt;span style=&#34;color:#75715e&#34;&gt;//tot1表示普通点中比第i个特殊点小的点的个数，即可推到的最长长度
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; upper_bound(sp.begin(),sp.end(),sp[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tot1);
    tot2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; sp.begin();&lt;span style=&#34;color:#75715e&#34;&gt;//tot2表示不在从b[i]往前推的这一长串中的点的数目
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    can &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; tot2;&lt;span style=&#34;color:#75715e&#34;&gt;//can加上总共i+1个点，其中前tot2个不被覆盖
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    mx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(mx,can);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;总代码&#34;&gt;总代码：&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;p, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;sp) {
    sort(p.begin(), p.end());
    sort(sp.begin(), sp.end());
    map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; mp;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; k:p) mp[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.size(), m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sp.size(), i, mx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, can, tot1, tot2;
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; cum(m &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; m; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        cum[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cum[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; mp[sp[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]];
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        can &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cum[m] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; cum[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];&lt;span style=&#34;color:#75715e&#34;&gt;//通过can算出后续列表中位于特殊点的
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//cout&amp;lt;&amp;lt;i&amp;lt;&amp;lt;&amp;#34;  &amp;#34;&amp;lt;&amp;lt;can&amp;lt;&amp;lt;endl;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; upper_bound(p.begin(), p.end(), sp[i]);&lt;span style=&#34;color:#75715e&#34;&gt;//比第i个特殊点更大
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (k &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; p.end()) { tot1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n; }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { tot1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; p.begin()); }&lt;span style=&#34;color:#75715e&#34;&gt;//tot:普通点中比第i个特殊点大的最小的点的数目
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; upper_bound(sp.begin(), sp.end(), sp[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; tot1);&lt;span style=&#34;color:#75715e&#34;&gt;//sp[i]-tot1为最长的理论值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        tot2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (l &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; sp.begin());&lt;span style=&#34;color:#75715e&#34;&gt;//不在这一序列中的点的数目
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        can &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; tot2;&lt;span style=&#34;color:#75715e&#34;&gt;//结果
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//cout&amp;lt;&amp;lt;i&amp;lt;&amp;lt;&amp;#34;  &amp;#34;&amp;lt;&amp;lt;can&amp;lt;&amp;lt;endl;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        mx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(mx, can);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mx;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    ios&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sync_with_stdio(false);
    cin.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),cout.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; t;
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; t;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (t&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; n, m, x;
        cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m;
        vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; npos, pos, nspos, spos;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (n&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
            cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) { pos.push_back(x); }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { npos.push_back(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x); }
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (m&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
            cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) { spos.push_back(x); }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { nspos.push_back(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x); }
        }
        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; solve(pos, spos) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; solve(npos, nspos) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;d-dogeforces&#34;&gt;D. Dogeforces&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/1494/problem/D&#34;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;题意-1&#34;&gt;题意：&lt;/h4&gt;
&lt;p&gt;给出所有子节点两个点之间的共有祖先的值，构造出原数&lt;/p&gt;
&lt;h4 id=&#34;算法-1&#34;&gt;算法：&lt;/h4&gt;
&lt;p&gt;并查集+分治，对所有以值为i的点为根的点进行遍历，构造出子数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt; 		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; mx &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;//根节点的值一定大于总节点数目，遍历有同一根节点的点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (h[i].empty()) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//这个节点莫得
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k;&lt;span style=&#34;color:#75715e&#34;&gt;//当前的值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;j : h[i]) fa[j.first] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find(j.first), fa[j.second] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find(j.second); &lt;span style=&#34;color:#75715e&#34;&gt;//初始化每一个的父节点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;j : h[i]) f[find(fa[j.first])] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find(fa[j.second]);&lt;span style=&#34;color:#75715e&#34;&gt;//合并
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;j : h[i]) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find(j.first);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; cur) b[&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i, f[x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k, x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k;&lt;span style=&#34;color:#75715e&#34;&gt;//构造树
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            a[fa[j.first]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[fa[j.second]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;代码&#34;&gt;代码：&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maxn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50000&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b[maxn], f[maxn], a[maxn], fa[maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k, n;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; h[maxn];

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; f[x] &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; x : f[x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find(f[x]); &lt;span style=&#34;color:#75715e&#34;&gt;//并查集
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
    k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n; &lt;span style=&#34;color:#75715e&#34;&gt;//至少k个点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;//根节点的值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) f[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;//并查集初始化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m;
            cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; j) { b[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m; }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; j) {
                h[m].emplace_back(i, j);
                mx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(mx, m);
            }
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; mx &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) { 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (h[i].empty()) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;j : h[i]) fa[j.first] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find(j.first), fa[j.second] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find(j.second); 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;j : h[i]) f[find(fa[j.first])] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find(fa[j.second]);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;j : h[i]) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find(j.first);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; cur) b[&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i, f[x] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k, x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k;
            a[fa[j.first]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[fa[j.second]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;
        }
    }
    b[&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mx;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;i : h[mx]) {
        a[find(i.first)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[find(i.second)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k;
    }
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; k; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;e-a-z-graph&#34;&gt;E. A-Z Graph&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/1494/problem/E&#34;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;题意-2&#34;&gt;题意&lt;/h4&gt;
&lt;p&gt;n个点，m次查询+修改。可令u-&amp;gt;v=c，也可删去。查询是否能走出一个长度为k的回文路径（即从头到尾和从尾到头一样）&lt;/p&gt;
&lt;h4 id=&#34;题解&#34;&gt;题解&lt;/h4&gt;
&lt;p&gt;本题目极水&amp;hellip;&amp;hellip;早知道做题的时候就来写这道题目了&amp;hellip;.&lt;/p&gt;
&lt;p&gt;注意到k为奇数时走偶数次，即u-&amp;gt;v-&amp;gt;u，必然是回文路径&lt;/p&gt;
&lt;p&gt;k为偶数时需要u-&amp;gt;v=v-&amp;gt;u即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(c&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u , v;
            cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;v&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;w;
            e[mp(u,v)]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;w;
            pii g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mp(v,u);
            p&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;(e.find(g)&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;e.end());
            q&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;(e.find(g)&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;e.end()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;e[g]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;w);

        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;(c&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u , v;
            cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;v;
            w&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;e[mp(u,v)];
            e.erase(mp(u,v));
            pii g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mp(v,u);
            p&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;(e.find(g)&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;e.end());
            q&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;(e.find(g)&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;e.end()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;e[g]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;w);
        }
		&lt;span style=&#34;color:#75715e&#34;&gt;//p和q分别表示u-&amp;gt;v和v-&amp;gt;u都存在的路径条数&amp;amp;&amp;amp;u-&amp;gt;v==v-&amp;gt;u的路径条数
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;代码-1&#34;&gt;代码&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define pii pair&amp;lt;int,int&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define mp make_pair
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n , m , q, p;
map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;e;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;m;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c,w;
        cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;c;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(c&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u , v;
            cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;v&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;w;
            e[mp(u,v)]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;w;
            pii g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mp(v,u);
            p&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;(e.find(g)&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;e.end());
            q&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;(e.find(g)&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;e.end()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;e[g]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;w);

        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(c&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u , v;
            cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;v;
            w&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;e[mp(u,v)];
            e.erase(mp(u,v));
            pii g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mp(v,u);
            p&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;(e.find(g)&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;e.end());
            q&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;(e.find(g)&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;e.end()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;e[g]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;w);
        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k;
            cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;k;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(k&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
                    cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YES&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
                }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
                    cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
                }
            }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(q&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
                    cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YES&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
                }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
                    cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>202102</title>
      <link>https://siyangshao.github.io/posts/202102/</link>
      <pubDate>Sat, 27 Feb 2021 23:21:16 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/202102/</guid>
      <description>写于2021年春节前
 ​	春节到了。对我自己而言，在上海大学接下来的三年也是注定的，不起波澜。经过努力，或许，也只是或许，icpc能拿个铜乃至于银，绩点能稍微高那么一点。于我而言，对未来有选择么？我不知道。考研，出国，直接工作？能否拿到心仪的offer？回想起了高中的自命不凡，与当初的可笑。作为一个扩招后的211大学的底层，我真的有那么多选择么？好听的话谁都会说。考研我想考浙大，出国想去北美匪帮，工作想去BAT。但是，这一切却都极度的不现实。事实是，我可能只能考上本校的研究生，出国也只能去类似于英国非G5的水硕，工作上拿的offer也都不如人意。新年了，于我而言我却没有新年。
​	还有5个月，我就18岁了。第17年一整年，充斥着彷徨，失落，自责与失败。毫无疑问的，正如上海大学的名字会伴随我终身一样，这种说不清的失败感也将会在往后的每一个日夜相随。
​	终究只是个失败者罢了。如果，如果，如果当初高考哪怕多了3到5分，我或许就能去南科大，或许就能去吉林，或者干脆放弃理工科，去华政普通法学，那或许就会好多了吧。
​	不过是一个失败者罢了，有什么资格多说呢？
 2月末
 ​	3月，距离期末考只有短短的两周了。微积分，线性代数，大学物理，仿若三座大山压在我的头上。但求80+。</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;写于2021年春节前&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​		春节到了。对我自己而言，在上海大学接下来的三年也是注定的，不起波澜。经过努力，或许，也只是或许，icpc能拿个铜乃至于银，绩点能稍微高那么一点。于我而言，对未来有选择么？我不知道。考研，出国，直接工作？能否拿到心仪的offer？回想起了高中的自命不凡，与当初的可笑。作为一个扩招后的211大学的底层，我真的有那么多选择么？好听的话谁都会说。考研我想考浙大，出国想去北美匪帮，工作想去BAT。但是，这一切却都极度的不现实。事实是，我可能只能考上本校的研究生，出国也只能去类似于英国非G5的水硕，工作上拿的offer也都不如人意。新年了，于我而言我却没有新年。&lt;/p&gt;
&lt;p&gt;​		还有5个月，我就18岁了。第17年一整年，充斥着彷徨，失落，自责与失败。毫无疑问的，正如上海大学的名字会伴随我终身一样，这种说不清的失败感也将会在往后的每一个日夜相随。&lt;/p&gt;
&lt;p&gt;​		终究只是个失败者罢了。如果，如果，如果当初高考哪怕多了3到5分，我或许就能去南科大，或许就能去吉林，或者干脆放弃理工科，去华政普通法学，那或许就会好多了吧。&lt;/p&gt;
&lt;p&gt;​		不过是一个失败者罢了，有什么资格多说呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2月末&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​		3月，距离期末考只有短短的两周了。微积分，线性代数，大学物理，仿若三座大山压在我的头上。但求80+。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>图论问题</title>
      <link>https://siyangshao.github.io/posts/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 31 Jan 2021 16:06:52 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/</guid>
      <description>存储 直接存边 const int M = 1e5+10; struct Edge{int u ,v,w;} e[M]; int tot; void add(int u,int v,int w){ e[++tot].u=u,e[tot].v=v,e[tot].w=w; } bool cmp(Edge a , Edge b){ return a.w&amp;lt;b.w; } int main(){ //add  sort(e+1,e+1+tot,cmp); } 邻接矩阵 优势：便于查询边的存在
但是，很显然， 仅仅在稠密图中这么做较为合理
const int M = 520; int mp[M][M]; int main(){ int n,m;//点数，边数  cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m; for(int i = 0,u,v,w;i&amp;lt;=m;i++){ cin&amp;gt;&amp;gt;u&amp;gt;&amp;gt;v&amp;gt;&amp;gt;w; mp[u][v]=w;//u到v的边边权为w  } int x = 1; //对点x遍历  for(int i = 1 ; i &amp;lt;= n ; i++){ if(i==x){ continue; } if(mp[x][i]){ //.</description>
      <content>&lt;h1 id=&#34;存储&#34;&gt;存储&lt;/h1&gt;
&lt;h2 id=&#34;直接存边&#34;&gt;直接存边&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; M &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Edge&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u ,v,w;} e[M];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tot;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w){
    e[&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;tot].u&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;u,e[tot].v&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v,e[tot].w&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;w;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;(Edge a , Edge b){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a.w&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;b.w;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color:#75715e&#34;&gt;//add
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    sort(e&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,e&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;tot,cmp);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;邻接矩阵&#34;&gt;邻接矩阵&lt;/h2&gt;
&lt;p&gt;优势：便于查询边的存在&lt;/p&gt;
&lt;p&gt;但是，很显然， 仅仅在稠密图中这么做较为合理&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; M &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;520&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mp[M][M];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n,m;&lt;span style=&#34;color:#75715e&#34;&gt;//点数，边数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;m;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,u,v,w;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;m;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;v&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;w;
        mp[u][v]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;w;&lt;span style=&#34;color:#75715e&#34;&gt;//u到v的边边权为w
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;//对点x遍历
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;x){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(mp[x][i]){
            &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;邻接表&#34;&gt;邻接表&lt;/h2&gt;
&lt;p&gt;不能快速判断边的存在&lt;/p&gt;
&lt;p&gt;判断u-&amp;gt;v边是否存在O(deg+(u))，初始排序后可以做O(log(d+(u)))&lt;/p&gt;
&lt;p&gt;遍历点u所有出边O(deg+(u))，&lt;/p&gt;
&lt;p&gt;遍历整张图O(n+m)&lt;/p&gt;
&lt;p&gt;空间复杂度O(m)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; pii;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pii&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; G[N];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n,m;
    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;m;&lt;span style=&#34;color:#75715e&#34;&gt;//点数&amp;amp;边数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ,u,v,w ; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;m ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;v&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;w;
        G[u].push_back({v,w});
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; it:G[x]){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; to &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; it.first , ww &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; it.second;
        &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;链式前向星&#34;&gt;链式前向星&lt;/h2&gt;
&lt;p&gt;不能快速判断边的存在，不方便排序，但是边带有编号，可以得到反边，常常用于网络流&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; M &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2e5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Edge&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; to , w, nxt;}e[M];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; h[N],tot;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; add{&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u , &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v , &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; w}{
	e[tot].to &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v, e[tot].w&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;w;
	e[tot].nxt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;h[u];&lt;span style=&#34;color:#75715e&#34;&gt;//连接以u为起点的上一条边
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	h[u]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tot&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//这条边的编号
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;拓扑排序&#34;&gt;拓扑排序&lt;/h1&gt;
&lt;h2 id=&#34;kahn算法&#34;&gt;KAHN算法：&lt;/h2&gt;
&lt;p&gt;定义集合S和空序列L，初始为所有入度为0的点，然后S中取出一点加入L，将它的所有出边删除，如果有点入度变为0，则将该点也加入集合S，不断重复直至S为空。若有点不在序列L中，说明图中有环，否则L就是拓扑排序结果&lt;/p&gt;
&lt;h3 id=&#34;题目&#34;&gt;题目：&lt;/h3&gt;
&lt;p&gt;Windy has &lt;em&gt;N&lt;/em&gt; balls of distinct weights from 1 unit to &lt;em&gt;N&lt;/em&gt; units. Now he tries to label them with 1 to &lt;em&gt;N&lt;/em&gt; in such a way that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;No two balls share the same label.&lt;/li&gt;
&lt;li&gt;The labeling satisfies several constrains like &amp;ldquo;The ball labeled with &lt;em&gt;a&lt;/em&gt; is lighter than the one labeled with &lt;em&gt;b&amp;rdquo;.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Can you help windy to find a solution?&lt;/p&gt;
&lt;h3 id=&#34;input&#34;&gt;Input：&lt;/h3&gt;
&lt;p&gt;The first line of input is the number of test case. The first line of each test case contains two integers, &lt;em&gt;N&lt;/em&gt; (1 ≤ &lt;em&gt;N&lt;/em&gt; ≤ 200) and &lt;em&gt;M&lt;/em&gt; (0 ≤ &lt;em&gt;M&lt;/em&gt; ≤ 40,000). The next &lt;em&gt;M&lt;/em&gt; line each contain two integers &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; indicating the ball labeled with &lt;em&gt;a&lt;/em&gt; must be lighter than the one labeled with &lt;em&gt;b&lt;/em&gt;. (1 ≤ &lt;em&gt;a, b&lt;/em&gt; ≤ &lt;em&gt;N&lt;/em&gt;) There is a blank line before each test case.&lt;/p&gt;
&lt;h3 id=&#34;output&#34;&gt;Output：&lt;/h3&gt;
&lt;p&gt;For each test case output on a single line the balls&amp;rsquo; weights from label 1 to label &lt;em&gt;N&lt;/em&gt;. If several solutions exist, you should output the one with the smallest weight for label 1, then with the smallest weight for label 2, then with the smallest weight for label 3 and so on&amp;hellip; If no solution exists, output -1 instead.&lt;/p&gt;
&lt;h3 id=&#34;sample-input&#34;&gt;Sample Input：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;5

4 0

4 1
1 1

4 2
1 2
2 1

4 1
2 1

4 1
3 2
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;sample-output&#34;&gt;Sample Output:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;1 2 3 4
-1
-1
2 1 3 4
1 3 2 4
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;code&#34;&gt;Code:&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mp[&lt;span style=&#34;color:#ae81ff&#34;&gt;210&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;210&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; g[&lt;span style=&#34;color:#ae81ff&#34;&gt;210&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; T,n,m ,u,v;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Topo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; weight[&lt;span style=&#34;color:#ae81ff&#34;&gt;210&lt;/span&gt;];
    priority_queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;q;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(g[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            q.push(i);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;q.empty()){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;q.top();
        q.pop();
        weight[k]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cnt&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(mp[i][k]){
                g[i]&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(g[i]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
                    q.push(i);
            }
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(cnt&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; weight[i];
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;n){
                cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
            }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
                cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;endl;
            }
        }
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;T;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(T&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
        cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;m;
        memset(g,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(g));
        memset(mp,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(mp));
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(m&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
            cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;u&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;v;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(mp[u][v]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
                mp[u][v]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                g[u]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
            }
        }
        Topo(n);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;最短路&#34;&gt;最短路&lt;/h1&gt;
&lt;h2 id=&#34;floyd&#34;&gt;Floyd&lt;/h2&gt;
&lt;p&gt;适用范围：任意两点，复杂度高，常数小&lt;/p&gt;
&lt;p&gt;初始已更新集合S包含起点，U包含其它点。 dis[x]表示起点到点 x 的最短距离，每次从U中选出距离最短的点K，删去，并更新各个点到起点的距离，即dis[v]=min(dis[v],dis[K]+COST[K][V])，即通过U中点的最短路径更新相邻点的最短路径，直至所有点更新过。&lt;/p&gt;
&lt;h3 id=&#34;题目-1&#34;&gt;题目：&lt;/h3&gt;
&lt;p&gt;某省自从实行了很多年的畅通工程计划后，终于修建了很多路。不过路多了也不好，每次要从一个城镇到另一个城镇时，都有许多种道路方案可以选择，而某些方案要比另一些方案行走的距离要短很多。这让行人很困扰。&lt;/p&gt;
&lt;p&gt;现在，已知起点和终点，请你计算出要从起点到终点，最短需要行走多少距离。&lt;/p&gt;
&lt;h3 id=&#34;input-1&#34;&gt;Input:&lt;/h3&gt;
&lt;p&gt;本题目包含多组数据，请处理到文件结束。
每组数据第一行包含两个正整数N和M(0&amp;lt;N&amp;lt;200,0&amp;lt;M&amp;lt;1000)，分别代表现有城镇的数目和已修建的道路的数目。城镇分别以0～N-1编号。
接下来是M行道路信息。每一行有三个整数A,B,X(0&amp;lt;=A,B&amp;lt;N,A!=B,0&amp;lt;X&amp;lt;10000),表示城镇A和城镇B之间有一条长度为X的双向道路。
再接下一行有两个整数S,T(0&amp;lt;=S,T&amp;lt;N)，分别代表起点和终点。&lt;/p&gt;
&lt;h3 id=&#34;output-1&#34;&gt;Output:&lt;/h3&gt;
&lt;p&gt;对于每组数据，请在一行里输出最短需要行走的距离。如果不存在从S到T的路线，就输出-1.&lt;/p&gt;
&lt;h3 id=&#34;sample-input-1&#34;&gt;Sample Input&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;3 3
0 1 1
0 2 3
1 2 1
0 2
3 1
0 1 1
1 2
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;sample-output-1&#34;&gt;Sample Output&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;2
-1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;code-1&#34;&gt;Code&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;201&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dis[N][N];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n,m,s,t;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;m) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
                dis[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f3f3f3f&lt;/span&gt;;
            }
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, u, v, w; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; w;
            dis[u][v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dis[v][u] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(w, dis[u][v]);
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; k&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
                    dis[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(dis[i][j], dis[i][k] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dis[k][j]);
                }
            }
        }
        cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; t;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dis[s][t] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f3f3f3f&lt;/span&gt;) {
            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dis[s][t] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;最短路bellman-ford&#34;&gt;最短路BELLMAN-FORD&lt;/h2&gt;
&lt;p&gt;基于松弛操作最短路算法，适用于存在负边权的图上求最短路，也能判断是否存在负权回路&lt;/p&gt;
&lt;h3 id=&#34;题目-2&#34;&gt;题目&lt;/h3&gt;
&lt;p&gt;While exploring his many farms, Farmer John has discovered a number of amazing wormholes. A wormhole is very peculiar because it is a one-way path that delivers you to its destination at a time that is BEFORE you entered the wormhole! Each of FJ&amp;rsquo;s farms comprises &lt;em&gt;N&lt;/em&gt; (1 ≤ &lt;em&gt;N&lt;/em&gt; ≤ 500) fields conveniently numbered 1..&lt;em&gt;N&lt;/em&gt;, &lt;em&gt;M&lt;/em&gt; (1 ≤ &lt;em&gt;M&lt;/em&gt; ≤ 2500) paths, and &lt;em&gt;W&lt;/em&gt; (1 ≤ &lt;em&gt;W&lt;/em&gt; ≤ 200) wormholes.&lt;/p&gt;
&lt;p&gt;As FJ is an avid time-traveling fan, he wants to do the following: start at some field, travel through some paths and wormholes, and return to the starting field a time before his initial departure. Perhaps he will be able to meet himself :) .&lt;/p&gt;
&lt;p&gt;To help FJ find out whether this is possible or not, he will supply you with complete maps to &lt;em&gt;F&lt;/em&gt; (1 ≤ &lt;em&gt;F&lt;/em&gt; ≤ 5) of his farms. No paths will take longer than 10,000 seconds to travel and no wormhole can bring FJ back in time by more than 10,000 seconds.&lt;/p&gt;
&lt;h3 id=&#34;input-2&#34;&gt;Input&lt;/h3&gt;
&lt;p&gt;Line 1: A single integer, &lt;em&gt;F&lt;/em&gt;. &lt;em&gt;F&lt;/em&gt; farm descriptions follow.
Line 1 of each farm: Three space-separated integers respectively: &lt;em&gt;N&lt;/em&gt;, &lt;em&gt;M&lt;/em&gt;, and &lt;em&gt;W&lt;/em&gt;
Lines 2..&lt;em&gt;M&lt;/em&gt;+1 of each farm: Three space-separated numbers (&lt;em&gt;S&lt;/em&gt;, &lt;em&gt;E&lt;/em&gt;, &lt;em&gt;T&lt;/em&gt;) that describe, respectively: a bidirectional path between &lt;em&gt;S&lt;/em&gt; and &lt;em&gt;E&lt;/em&gt; that requires &lt;em&gt;T&lt;/em&gt; seconds to traverse. Two fields might be connected by more than one path.
Lines &lt;em&gt;M&lt;/em&gt;+2..&lt;em&gt;M&lt;/em&gt;+&lt;em&gt;W&lt;/em&gt;+1 of each farm: Three space-separated numbers (&lt;em&gt;S&lt;/em&gt;, &lt;em&gt;E&lt;/em&gt;, &lt;em&gt;T&lt;/em&gt;) that describe, respectively: A one way path from &lt;em&gt;S&lt;/em&gt; to &lt;em&gt;E&lt;/em&gt; that also moves the traveler back &lt;em&gt;T&lt;/em&gt; seconds.&lt;/p&gt;
&lt;h3 id=&#34;output-2&#34;&gt;Output&lt;/h3&gt;
&lt;p&gt;Lines 1..&lt;em&gt;F&lt;/em&gt;: For each farm, output &amp;ldquo;YES&amp;rdquo; if FJ can achieve his goal, otherwise output &amp;ldquo;NO&amp;rdquo; (do not include the quotes).&lt;/p&gt;
&lt;h3 id=&#34;sample-input-2&#34;&gt;Sample Input&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;2
3 3 1
1 2 2
1 3 4
2 3 1
3 1 3
3 2 1
1 2 3
2 3 4
3 1 8
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;sample-output-2&#34;&gt;Sample Output&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;NO
YES
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;code-2&#34;&gt;Code&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6000&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n,m,dis[N],all;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t,k;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Edge&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; start,end,to;}e[N];
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bellman_ford&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; flag;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
    {
        flag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;all; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(dis[e[j].end] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; dis[e[j].start] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; e[j].to)
            {
                dis[e[j].end] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dis[e[j].start] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; e[j].to ;
                flag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;
            }

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;flag)&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;all; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(dis[e[j].end] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; dis[e[j].start] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; e[j].to)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;t;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(t&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
        cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; k;
        memset(dis, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(dis));
        memset(e,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(e));
        all &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, u, v, w; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; w;
            e[all].start&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;e[all&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;u;
            e[all].end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;e[all&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].start&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v;
            e[all].to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;e[all&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;w;
            all&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, u, v, w; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;  k; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; w;
            e[all].start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u;
            e[all].end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v;
            e[all].to &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;w;
            all&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(bellman_ford()){
            cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YES&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
            cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;网络流&#34;&gt;网络流&lt;/h1&gt;
&lt;p&gt;网络是指一个有向图，每条边都有一个容量 (cap) 和实际流量 (flow) 。&lt;/p&gt;
&lt;p&gt;图中有源点S、汇点T，除源点和汇点之外流入所有其他点的流量一定等于流出该节点的流量（不会凭空产生流量）&lt;/p&gt;
&lt;p&gt;总流量：源点的输出/汇点的输入&lt;/p&gt;
&lt;p&gt;最大流：从源点S流向汇点T的最大流量&lt;/p&gt;
&lt;p&gt;最小割：是割掉 M 条边来让源点S跟汇点T不互通，要求M条边加起来的流量总和最小。&lt;/p&gt;
&lt;p&gt;费用流：每条边都有单位流量流过的开销，要在求出最大流的同时，要求花费的费用最小。&lt;/p&gt;
&lt;h3 id=&#34;题目-3&#34;&gt;题目&lt;/h3&gt;
&lt;p&gt;Network flow is a well-known difficult problem for ACMers. Given a graph, your task is to find out the maximum flow for the weighted directed graph.&lt;/p&gt;
&lt;h3 id=&#34;input-3&#34;&gt;Input&lt;/h3&gt;
&lt;p&gt;The first line of input contains an integer T, denoting the number of test cases.
For each test case, the first line contains two integers N and M, denoting the number of vertexes and edges in the graph. (2 &amp;lt;= N &amp;lt;= 15, 0 &amp;lt;= M &amp;lt;= 1000)
Next M lines, each line contains three integers X, Y and C, there is an edge from X to Y and the capacity of it is C. (1 &amp;lt;= X, Y &amp;lt;= N, 1 &amp;lt;= C &amp;lt;= 1000)&lt;/p&gt;
&lt;h3 id=&#34;output-3&#34;&gt;Output&lt;/h3&gt;
&lt;p&gt;For each test cases, you should output the maximum flow from source 1 to sink N.&lt;/p&gt;
&lt;h3 id=&#34;sample-input-3&#34;&gt;Sample Input&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;2
3 2
1 2 1
2 3 1
3 3
1 2 1
2 3 1
1 3 1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;sample-output-3&#34;&gt;Sample Output&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Case 1: 1
Case 2: 2
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;code-3&#34;&gt;Code&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maxn&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;205&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; inf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x7fffffff&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r[maxn][maxn]; &lt;span style=&#34;color:#75715e&#34;&gt;//残留网络，初始化为原图
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; visit[maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pre[maxn];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m,n;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t;
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bfs&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; s,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t) &lt;span style=&#34;color:#75715e&#34;&gt;//寻找一条从s到t的增广路，若找到返回true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p;
    queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; q;
    memset(pre,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(pre));
    memset(visit,false,&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(visit));

    pre[s]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;s;
    visit[s]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;
    q.push(s);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;q.empty())
    {
        p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;q.front();
        q.pop();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(r[p][i]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;!&lt;/span&gt;visit[i])
            {
                pre[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;p;
                visit[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;t) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
                q.push(i);
            }
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EdmondsKarp&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; s,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flow&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,d,i;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(bfs(s,t))
    {
        d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;inf;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;t;i&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;s;i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pre[i])
            d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;r[pre[i]][i]&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; d:r[pre[i]][i];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;t;i&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;s;i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pre[i])
        {
            r[pre[i]][i]&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;d;
            r[i][pre[i]]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;d;
        }
        flow&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;d;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; flow;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;t;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; t ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;m;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; u, v, w;
        memset(r, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(r));&lt;span style=&#34;color:#75715e&#34;&gt;///
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%d%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;u, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w);
            r[u][v] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; w;
        }
        cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;EdmondsKarp(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>博弈问题</title>
      <link>https://siyangshao.github.io/posts/%E5%8D%9A%E5%BC%88%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 26 Jan 2021 16:06:52 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/%E5%8D%9A%E5%BC%88%E9%97%AE%E9%A2%98/</guid>
      <description>博弈 对于博弈而言，我最常用的方法是~自己自闭玩一玩看看能不能凑出解答，凑出来就去dirt一发数据
今天学到的解法是sg函数
前置—DAG Game 结论： 1.无后继节点的局面必败
2.必胜态的后继结点中必然存在必败态
3.必败态的后继结点均为必胜态
解释： 1.无后继节点的局面代表决策者无事可做，即已经失败
2.对于必胜态而言，意味着决策者经过一定的行动可以使得对手进入必败态，即后续节点一定存在必败态
3.对必败态，无论如何抉择对手一定必胜， 故后继结点均为必胜态
基石—Nim Game 定义： 有n堆石子，每堆石子有$a_i$个
两名玩家轮流行动，每次可以从任意一堆中选取1~$a_i$个
取走最后一个石子的玩家获胜
若都采取最佳策略，先手是否必胜？
结论： $$ 当且仅当a_1\oplus a_2\oplus \cdot\cdot\cdot a_n \ne 0时先手存在必胜策略 $$
证明： SG函数 首先介绍mex函数： $$ mex(S) = min_{i\in N , i \notin S}{i} $$ 即mex(S)表示最小不属于集合的非负整数
SG函数就是对DAG图上节点取Mex值 $$ SG(x) = mex{SG(y)|x \to y} $$ 即对局面x所有后继状态y取mex得到的值
SG定理 对多个 DAG Game，整个游戏的SG值为 $$ SG(x) = SG(x_1) \oplus SG(x_2) \oplus \cdot \cdot\cdot SG(x_n) $$ 当且仅当SG（X）==0，先手必败
板子题目 ​	m堆石子,两人轮流取.</description>
      <content>&lt;h1 id=&#34;博弈&#34;&gt;博弈&lt;/h1&gt;
&lt;p&gt;对于博弈而言，我最常用的方法是~&lt;del&gt;自己自闭玩一玩看看能不能凑出解答，凑出来就去dirt一发数据&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;今天学到的解法是sg函数&lt;/p&gt;
&lt;h2 id=&#34;前置dag-game&#34;&gt;前置—DAG Game&lt;/h2&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.无后继节点的局面必败&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.必胜态的后继结点中必然存在必败态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.必败态的后继结点均为必胜态&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;解释&#34;&gt;解释：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.无后继节点的局面代表决策者无事可做，即已经失败&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.对于必胜态而言，意味着决策者经过一定的行动可以使得对手进入必败态，即后续节点一定存在必败态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.对必败态，无论如何抉择对手一定必胜， 故后继结点均为必胜态&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;基石nim-game&#34;&gt;基石—Nim Game&lt;/h2&gt;
&lt;h3 id=&#34;定义&#34;&gt;定义：&lt;/h3&gt;
&lt;p&gt;有n堆石子，每堆石子有$a_i$个&lt;/p&gt;
&lt;p&gt;两名玩家轮流行动，每次可以从任意一堆中选取1~$a_i$个&lt;/p&gt;
&lt;p&gt;取走最后一个石子的玩家获胜&lt;/p&gt;
&lt;p&gt;若都采取最佳策略，先手是否必胜？&lt;/p&gt;
&lt;h3 id=&#34;结论-1&#34;&gt;结论：&lt;/h3&gt;
&lt;p&gt;$$
当且仅当a_1\oplus a_2\oplus \cdot\cdot\cdot a_n \ne 0时先手存在必胜策略
$$&lt;/p&gt;
&lt;h3 id=&#34;证明&#34;&gt;证明：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://siyangshao.github.io/images/nim_game.png&#34; alt=&#34;nim游戏证明&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sg函数&#34;&gt;SG函数&lt;/h2&gt;
&lt;p&gt;首先介绍mex函数：
$$
mex(S) = min_{i\in N , i \notin S}{i}
$$
即mex(S)表示最小不属于集合的非负整数&lt;/p&gt;
&lt;p&gt;SG函数就是对DAG图上节点取Mex值
$$
SG(x) = mex{SG(y)|x \to y}
$$
即对局面x所有后继状态y取mex得到的值&lt;/p&gt;
&lt;h3 id=&#34;sg定理&#34;&gt;SG定理&lt;/h3&gt;
&lt;p&gt;对多个 DAG Game，整个游戏的SG值为
$$
SG(x) = SG(x_1) \oplus SG(x_2) \oplus \cdot \cdot\cdot SG(x_n)
$$
当且仅当SG（X）==0，先手必败&lt;/p&gt;
&lt;h2 id=&#34;板子题目&#34;&gt;板子题目&lt;/h2&gt;
&lt;p&gt;​		m堆石子,两人轮流取.只能在1堆中取.取完者胜.先取者负输出No.先取者胜输出Yes,然后输出怎样取子.例如5堆 5,7,8,9,10先取者胜,先取者第1次取时可以从有8个的那一堆取走7个剩下1个,也可以从有9个的中那一堆取走9个剩下0个,也可以从有10个的中那一堆取走7个剩下3个.&lt;/p&gt;
&lt;h3 id=&#34;input&#34;&gt;Input&lt;/h3&gt;
&lt;p&gt;输入有多组.每组第1行是m,m&amp;lt;=200000. 后面m个非零正整数.m=0退出.&lt;/p&gt;
&lt;h3 id=&#34;output&#34;&gt;Output&lt;/h3&gt;
&lt;p&gt;先取者负输出No.先取者胜输出Yes,然后输出先取者第1次取子的所有方法.如果从有a个石子的堆中取若干个后剩下b个后会胜就输出a b.参看Sample Output.&lt;/p&gt;
&lt;h3 id=&#34;sample-input&#34;&gt;Sample Input&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;2
45 45
3
3 6 9
5
5 7 8 9 10
0
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;sample-output&#34;&gt;Sample Output&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;No
Yes
9 5
Yes
8 1
9 0
10 3
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m , a[&lt;span style=&#34;color:#ae81ff&#34;&gt;200010&lt;/span&gt;],sum,t;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;m){
        sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;t&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(m&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;a[i];
            sum &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; a[i];
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(sum&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
            cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
            cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
                t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;a[i];
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(t&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a[i]){
                    cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;a[i]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;t&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;endl;
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;一些结论&#34;&gt;一些结论&lt;/h1&gt;
&lt;h2 id=&#34;巴什博弈&#34;&gt;巴什博弈&lt;/h2&gt;
&lt;h3 id=&#34;题目&#34;&gt;题目：&lt;/h3&gt;
&lt;p&gt;有1堆n个石子，每次每人能取$[1,m]$个石子&lt;/p&gt;
&lt;h3 id=&#34;结论-2&#34;&gt;结论：&lt;/h3&gt;
&lt;p&gt;当且仅当$n~mod~m+1~=~0$时，先手必败&lt;/p&gt;
&lt;h2 id=&#34;威佐夫博弈&#34;&gt;威佐夫博弈&lt;/h2&gt;
&lt;h3 id=&#34;题目-1&#34;&gt;题目：&lt;/h3&gt;
&lt;p&gt;有2堆石子，每人每次可以任选一堆拿走任意数量的石子或者在两堆拿走相同数量的石子&lt;/p&gt;
&lt;h3 id=&#34;结论-3&#34;&gt;结论：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://siyangshao.github.io/images/weizuofu.png&#34; alt=&#34;威佐夫&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;斐波那契博弈&#34;&gt;斐波那契博弈&lt;/h2&gt;
&lt;h3 id=&#34;题目-2&#34;&gt;题目：&lt;/h3&gt;
&lt;p&gt;有1堆n个石子，先手第一次可以拿任意个，但是不能全拿/全不拿，后面每个人至少拿一个，最多拿前一个人的两倍&lt;/p&gt;
&lt;h3 id=&#34;结论-4&#34;&gt;结论：&lt;/h3&gt;
&lt;p&gt;当且仅当石子数为斐波那契数时，先手必败&lt;/p&gt;
&lt;h2 id=&#34;二分图博弈&#34;&gt;二分图博弈&lt;/h2&gt;
&lt;p&gt;显然，我没学过图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://siyangshao.github.io/images/erfentu.png&#34; alt=&#34;二分图&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>202101</title>
      <link>https://siyangshao.github.io/posts/202101/</link>
      <pubDate>Thu, 21 Jan 2021 22:19:22 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/202101/</guid>
      <description>​	眨眼间，在SHU的第一个寒假来了。由于阴间的三学期，实际上已经过了1.5个学期了。第一个学期不可不谓失败，2.7的绩点仍然历历在目。第二个学期则是完全的放飞自我——不夸张地说，这个学期我几乎没有认真听过哪怕一节课。那么的话，一个寒假，我给你一个奇迹（大雾。
​	也不知道是幸运还是不幸，成功入选了2021的XCPC集训队，在接下来的两周里面临着集训。作为一个0基础的选手，选择竞赛这条路毫无疑问并不是一个理智的选择。无他，性价比太低而已。可是，在上海大学的名号完全不足以给我提供一个较好的基础、保研无望、不想考研（主要是不想考政治）的我真的有那么多解决方案可以选择么？显然，我表示怀疑。但是，打一两场铁，然后退役，这样的生涯真的能作为我日后求职的助力么？答案也显然是否定的。说到底，对我而言，选择ACM，选择参加集训队无非是一个失败者的自我安慰罢了。我既无法说服自己接受上海大学的现实，又缺少插班生或考研奋力一搏的勇气与信念，只能在恍恍惚惚中选择了ACM这个看上去高大上却又不是毫无退路的方式来解决自己那可笑的虚荣心和自尊。
​	正如标题一样，光荣与梦想。既不神圣，也不罗马，更不帝国。于上海大学的我而言，未来是可以预知的——毕业后成为一名普通的码农，拿着不上不下的工资，薪水每年有着一些微薄的上涨，到35周岁面临人生的坎，被优化，然后去更小一点的公司拿着更低的薪水，最终浑浑噩噩的度过一生。未来却又是不可预测的——我不得不去进行部分的“卷”，去换来未来的相对的可预测性并提升其的底线。
​	可是，这既不是光荣，也完全谈不上梦想。无论是Glory还是Dream，都和上海大学的普通人有什么关系呢？更甚之，我真正的，有过这些么？哪怕是还在SES的时候？答案恐怕是否定的。在这一个月里，或者说从去年8月至今，我完全活在自己的回忆里，活在中一初进实验的懵懂，初三最后的欢乐，高一理科班的自傲与高三那个寒假的放纵里面。无论如何，至少，在以上的所有节点里面，我的未来都可以存在光荣，存在梦想。可是如今呢？
​	活在现实罢。本来就是个普通人，懒散，没有任何优于常人的地方。我对中国的未来永远充满着自信，对自己的未来也同样，永远充满着自信——失败的自信。
 2021·1·22日续
 ​	普通211的计算机有未来么？我不知道。选择专业时，计算机是毫无疑问的高分专业，“宇宙机”。刚刚工作时，计算机，或者说互联网大厂，在世人看来，也是毫无疑问的高薪专业。可是，且不论互联网的光辉还能闪耀多久，这与普通211有着切肤的关系么？不打ICPC，不保研，如果是这样的一个普通人，在一所普通的211读着计算机，那么他毕业之后和互联网的高薪又有什么关系？却同样的，需要受到行业的996和35岁的限制。
​	之前看上海大学的计算机系薪资报告，依稀记得上大本科生毕业，即使是计算机系，也不过6000余元。这点薪水虽然称不上低，但是在高消费、高负担的上海，真的足以支撑生存么？我不知道。诚然，就我本人而言，还算良好的家境可以让我不用费力去攒出于上海的首付，乃至不用付出高昂的租金在上海蜗居。然而，父母所付出的一切并不是理所应当。当把一切的目光转回自己本人之时，所能感受到的便是深深的失败罢了。
​	就我父母那一辈人的经历来看，他们是真正通过读书改变了命运。在大学全面扩招的前夕（90年代初）考入东华就读计算机，而后读研，就业，在上海房价尚未飞涨的00年代刚需购房。这一路走下来，运气显然并不重要——每一个节点都算得上是当时就可以预料到的优解，也是当时所必须做出的抉择。然而，随着中国社会财富差距的进一步加大，北上深也对年轻人，或者说对普通人关上了大门。上海大学享受着上海的便利，造就了其虚高的录取分数线，也同时必须承受位于上海的压力——在上海，上海大学的名字于招聘会上而言，只不过是一所普通学校，乃至一所会给求职带来负面影响的，“只是读过书罢了”的学校。
​	很多时候，迷茫，不是因为不知道前路如何，而是因为不知道自己到底有没有退路。毕竟，像我一样的失败者只能在内卷的洪流中灰飞烟灭罢了。</description>
      <content>&lt;p&gt;​		眨眼间，在SHU的第一个寒假来了。由于阴间的三学期，实际上已经过了1.5个学期了。第一个学期不可不谓失败，2.7的绩点仍然历历在目。第二个学期则是完全的放飞自我——不夸张地说，这个学期我几乎没有认真听过哪怕一节课。那么的话，一个寒假，我给你一个奇迹（大雾。&lt;/p&gt;
&lt;p&gt;​		也不知道是幸运还是不幸，成功入选了2021的XCPC集训队，在接下来的两周里面临着集训。作为一个0基础的选手，选择竞赛这条路毫无疑问并不是一个理智的选择。无他，性价比太低而已。可是，在上海大学的名号完全不足以给我提供一个较好的基础、保研无望、不想考研（主要是不想考政治）的我真的有那么多解决方案可以选择么？显然，我表示怀疑。但是，打一两场铁，然后退役，这样的生涯真的能作为我日后求职的助力么？答案也显然是否定的。说到底，对我而言，选择ACM，选择参加集训队无非是一个失败者的自我安慰罢了。我既无法说服自己接受上海大学的现实，又缺少插班生或考研奋力一搏的勇气与信念，只能在恍恍惚惚中选择了ACM这个看上去高大上却又不是毫无退路的方式来解决自己那可笑的虚荣心和自尊。&lt;/p&gt;
&lt;p&gt;​		正如标题一样，光荣与梦想。既不神圣，也不罗马，更不帝国。于上海大学的我而言，未来是可以预知的——毕业后成为一名普通的码农，拿着不上不下的工资，薪水每年有着一些微薄的上涨，到35周岁面临人生的坎，被优化，然后去更小一点的公司拿着更低的薪水，最终浑浑噩噩的度过一生。未来却又是不可预测的——我不得不去进行部分的“卷”，去换来未来的相对的可预测性并提升其的底线。&lt;/p&gt;
&lt;p&gt;​		可是，这既不是光荣，也完全谈不上梦想。无论是Glory还是Dream，都和上海大学的普通人有什么关系呢？更甚之，我真正的，有过这些么？哪怕是还在SES的时候？答案恐怕是否定的。在这一个月里，或者说从去年8月至今，我完全活在自己的回忆里，活在中一初进实验的懵懂，初三最后的欢乐，高一理科班的自傲与高三那个寒假的放纵里面。无论如何，至少，在以上的所有节点里面，我的未来都可以存在光荣，存在梦想。可是如今呢？&lt;/p&gt;
&lt;p&gt;​		活在现实罢。本来就是个普通人，懒散，没有任何优于常人的地方。我对中国的未来永远充满着自信，对自己的未来也同样，永远充满着自信——失败的自信。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2021·1·22日续&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​		普通211的计算机有未来么？我不知道。选择专业时，计算机是毫无疑问的高分专业，“宇宙机”。刚刚工作时，计算机，或者说互联网大厂，在世人看来，也是毫无疑问的高薪专业。可是，且不论互联网的光辉还能闪耀多久，这与普通211有着切肤的关系么？不打ICPC，不保研，如果是这样的一个普通人，在一所普通的211读着计算机，那么他毕业之后和互联网的高薪又有什么关系？却同样的，需要受到行业的996和35岁的限制。&lt;/p&gt;
&lt;p&gt;​		之前看上海大学的计算机系薪资报告，依稀记得上大本科生毕业，即使是计算机系，也不过6000余元。这点薪水虽然称不上低，但是在高消费、高负担的上海，真的足以支撑生存么？我不知道。诚然，就我本人而言，还算良好的家境可以让我不用费力去攒出于上海的首付，乃至不用付出高昂的租金在上海蜗居。然而，父母所付出的一切并不是理所应当。当把一切的目光转回自己本人之时，所能感受到的便是深深的失败罢了。&lt;/p&gt;
&lt;p&gt;​		就我父母那一辈人的经历来看，他们是真正通过读书改变了命运。在大学全面扩招的前夕（90年代初）考入东华就读计算机，而后读研，就业，在上海房价尚未飞涨的00年代刚需购房。这一路走下来，运气显然并不重要——每一个节点都算得上是当时就可以预料到的优解，也是当时所必须做出的抉择。然而，随着中国社会财富差距的进一步加大，北上深也对年轻人，或者说对普通人关上了大门。上海大学享受着上海的便利，造就了其虚高的录取分数线，也同时必须承受位于上海的压力——在上海，上海大学的名字于招聘会上而言，只不过是一所普通学校，乃至一所会给求职带来负面影响的，“只是读过书罢了”的学校。&lt;/p&gt;
&lt;p&gt;​		很多时候，迷茫，不是因为不知道前路如何，而是因为不知道自己到底有没有退路。毕竟，像我一样的失败者只能在内卷的洪流中灰飞烟灭罢了。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>背包问题</title>
      <link>https://siyangshao.github.io/posts/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 20 Jan 2021 16:05:35 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
      <description>动态规划 背包问题 对于一个背包，总空间为$Val$,，单个物品空间为$C_i$，价值为$W_i$，可取次数为$W_i$（$W_i==0$时表示可取用无数次），用$F[v]$表示存储空间为$v$时所具有的价值的最大值，则可得：
01背包问题状态转移方程为
for(int v = val ; v &amp;gt;= c[i] ; v--){ f[v] = max(f[v], f[v - c[i]] + w[i]); } 完全背包问题状态转移方程为
for (int v = c[i]; v &amp;lt;= val; v++) { f[v] = max(f[v], f[v - c[i]] + w[i]); } 混合背包问题状态转移方程为
if (c[i] * m[i] &amp;gt;= val) { CompletePack(i); return; } int k = 1; while (k &amp;lt; m[i]) { for (int v = val; v &amp;gt;= k * c[i]; v--) { f[v] = max(f[v], f[v - k * c[i]] + k * w[i]); } m[i] = m[i] - k; k = 2 * k; } for (int v = val; v &amp;gt;= c[i] * m[i]; v--) { f[v] = max(f[v], f[v - c[i] * m[i]] + m[i] * w[i]); } 总代码：</description>
      <content>&lt;h1 id=&#34;动态规划-背包问题&#34;&gt;动态规划 背包问题&lt;/h1&gt;
&lt;p&gt;对于一个背包，总空间为$Val$,，单个物品空间为$C_i$，价值为$W_i$，可取次数为$W_i$（$W_i==0$时表示可取用无数次），用$F[v]$表示存储空间为$v$时所具有的价值的最大值，则可得：&lt;/p&gt;
&lt;p&gt;01背包问题状态转移方程为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val ; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; c[i] ; v&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
    f[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(f[v], f[v &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c[i]] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; w[i]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完全背包问题状态转移方程为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c[i]; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; val; v&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
	f[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(f[v], f[v &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c[i]] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; w[i]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;混合背包问题状态转移方程为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (c[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; val) {
	CompletePack(i);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m[i]) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; c[i]; v&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
		f[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(f[v], f[v &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; c[i]] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w[i]);
	}
	m[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; k;
	k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; c[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m[i]; v&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
	f[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(f[v], f[v &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m[i]] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w[i]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;总代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1010&lt;/span&gt;], c[&lt;span style=&#34;color:#ae81ff&#34;&gt;1010&lt;/span&gt;], w[&lt;span style=&#34;color:#ae81ff&#34;&gt;1010&lt;/span&gt;], m[&lt;span style=&#34;color:#ae81ff&#34;&gt;1010&lt;/span&gt;], val;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ZeroOnePack&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; c[i]; v&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
		f[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(f[v], f[v &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c[i]] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; w[i]);  &lt;span style=&#34;color:#75715e&#34;&gt;//01背包问题状态转移方程
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CompletePack&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c[i]; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; val; v&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		f[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(f[v], f[v &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c[i]] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; w[i]);  &lt;span style=&#34;color:#75715e&#34;&gt;//完全背包问题
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MultiplePack&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i) {	&lt;span style=&#34;color:#75715e&#34;&gt;//多重背包问题，二进制区分
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (c[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; val) {
		CompletePack(i);
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; m[i]) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; c[i]; v&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
			f[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(f[v], f[v &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; c[i]] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w[i]);
		}
		m[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; k;
		k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val; v &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; c[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m[i]; v&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
		f[v] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(f[v], f[v &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m[i]] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w[i]);
	}
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MixinPack&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n) {	 &lt;span style=&#34;color:#75715e&#34;&gt;//混合背包问题
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			ZeroOnePack(i);
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
			CompletePack(i);
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			MultiplePack(i);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>My2020</title>
      <link>https://siyangshao.github.io/posts/my2020/</link>
      <pubDate>Fri, 25 Dec 2020 23:12:59 +0800</pubDate>
      
      <guid>https://siyangshao.github.io/posts/my2020/</guid>
      <description>我的2020  写于2020年12月25日 圣诞夜
 ​	倘若总结2020的话，或许用一场失败比较合适。依稀记得，2019年12月31日在qq空间时，我对2019的总结是——几近完美。那么或许是报应吧，相应的2020就显得力不从心。也许是从那一场突如其来的疫情开始，从网课的时候，就逐渐地失去了对整个2020的把握。而后直到高考结束、等级考出分的那一刻，自我感觉仍然是混乱的——我的高三，或者说不仅仅是高中三年时光，而是自2014年那个盛夏的初遇到如今的6年时光就这么猝不及防地结束了。正如在那个一看就很sb的知乎问题“如何评价2020届SES毕业晚会”上所看到的一样——好多女孩子都好漂亮啊，可是，那与我又什么关系呢？
​	或许是折磨吧，等级考成绩还可以接受。化学的B+略有些意外，而物理的A+则冲淡了这份失落。可是，我也却万万没有想到大三门会给我开了如此之大的一个玩笑——就我自己看来，我的大三门毫无疑问可以说是高三以来的相对低点了。最终，连高三一直觉得自己可以的上科大和南科大也无法触及，最终收到了上大计院的录取通知。
​	凭心而论，在上大的这几个月并不算难过——大部分原因是有马sir等和我一样考砸的人的相伴23333，可是仍然能一直感受到那份无力感——上海大学的名字，并不能让我以此获利。于是，或许是不甘或作为一个落水者的自救举措，我去考了雅思。很显然地，作为一个一向的英语学渣，此举和给带嘤送钱没什么区别。或许明年还会尝试插班考，可是我却早已失去了查成绩和奋斗的勇气。
​	就年末而言，~~唯一还有点挂念的就是希望能参加学校的ACM了。作为一个0基础的人，的确逐渐地感到困难，也感受到自己三天打鱼两天晒网的问题。~~可是啊，日子终究还是需要有点盼头的，不是么？大学四年看来，高绩点、丰富如高中模联的课外活动、所谓的恋爱都不会存在的情况下，或许这门电子竞技可以重新点燃一下自己吧，至少是希望如此。
 2020/12/30更新 没有挂念 qnmd编程 老子要转文学系 👴要当文学少年 学nm 天天switch塞尔达火焰纹章女神异闻录不香么？打nmacm 这个梦对我这种弱鸡毫无用处
 #include &amp;lt;bits/stdc++.h&amp;gt;int main(){ std::cout&amp;lt;&amp;lt;&amp;#34;Hello World!&amp;#34;&amp;lt;&amp;lt;std::endl; std::cout&amp;lt;&amp;lt;&amp;#34;无论明年如何，总不会比今年更差了吧&amp;#34;&amp;lt;&amp;lt;std::endl; return 0; } 后续追加
2020/12/28
液 起飞~</description>
      <content>&lt;h3 id=&#34;我的2020&#34;&gt;我的2020&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;写于2020年12月25日 圣诞夜&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​		倘若总结2020的话，或许用一场失败比较合适。依稀记得，2019年12月31日在qq空间时，我对2019的总结是——几近完美。那么或许是报应吧，相应的2020就显得力不从心。也许是从那一场突如其来的疫情开始，从网课的时候，就逐渐地失去了对整个2020的把握。而后直到高考结束、等级考出分的那一刻，自我感觉仍然是混乱的——我的高三，或者说不仅仅是高中三年时光，而是自2014年那个盛夏的初遇到如今的6年时光就这么猝不及防地结束了。正如在那个一看就很sb的知乎问题“如何评价2020届SES毕业晚会”上所看到的一样——好多女孩子都好漂亮啊，可是，那与我又什么关系呢？&lt;/p&gt;
&lt;p&gt;​		或许是折磨吧，等级考成绩还可以接受。化学的B+略有些意外，而物理的A+则冲淡了这份失落。可是，我也却万万没有想到大三门会给我开了如此之大的一个玩笑——就我自己看来，我的大三门毫无疑问可以说是高三以来的相对低点了。最终，连高三一直觉得自己可以的上科大和南科大也无法触及，最终收到了上大计院的录取通知。&lt;/p&gt;
&lt;p&gt;​		凭心而论，在上大的这几个月并不算难过——大部分原因是有马sir等和我一样考砸的人的相伴23333，可是仍然能一直感受到那份无力感——上海大学的名字，并不能让我以此获利。于是，或许是不甘或作为一个落水者的自救举措，我去考了雅思。很显然地，作为一个一向的英语学渣，此举和给带嘤送钱没什么区别。或许明年还会尝试插班考，可是我却早已失去了查成绩和奋斗的勇气。&lt;/p&gt;
&lt;p&gt;​		就年末而言，~~唯一还有点挂念的就是希望能参加学校的ACM了。作为一个0基础的人，的确逐渐地感到困难，也感受到自己三天打鱼两天晒网的问题。~~可是啊，日子终究还是需要有点盼头的，不是么？大学四年看来，高绩点、丰富如高中模联的课外活动、所谓的恋爱都不会存在的情况下，或许这门电子竞技可以重新点燃一下自己吧，至少是希望如此。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2020/12/30更新 没有挂念 qnmd编程 老子要转文学系 👴要当文学少年 学nm 天天switch塞尔达火焰纹章女神异闻录不香么？打nmacm 这个梦对我这种弱鸡毫无用处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;无论明年如何，总不会比今年更差了吧&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后续追加&lt;/p&gt;
&lt;p&gt;2020/12/28&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://siyangshao.github.io/images/ielts.png&#34; alt=&#34;Total 7.0 , 6.0 minum&#34;&gt;&lt;/p&gt;
&lt;p&gt;液 起飞~&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Archive</title>
      <link>https://siyangshao.github.io/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://siyangshao.github.io/archive/</guid>
      <description></description>
      <content></content>
    </item>
    
  </channel>
</rss>
